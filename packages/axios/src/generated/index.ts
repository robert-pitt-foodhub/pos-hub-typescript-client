/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * POS Hub API
 * ## Introduction

Welcome to the POS Hub API documentation. This guide is designed to provide you with all the necessary information to seamlessly integrate your application with the POS Hub platform. Whether you're integrating a point-of-sale system, a reporting tool, an order management system, or any other application that interacts with the POS Hub API, this documentation will serve as your comprehensive resource.

Within this documentation, you will find detailed explanations of the API standards, authentication processes, common integration patterns, and pagination techniques employed by the POS Hub API. We will guide you through the steps of authenticating your application, making authenticated requests, and managing token expiration and refresh processes.

By following this documentation, you will be able to harness the full potential of the POS Hub API to optimize your business operations, access valuable data, and deliver a seamless experience to your users.

Let‚Äôs get started!

## API

The API section provides a thorough overview of the standards adhered to by the POS Hub API. These standards are in place to ensure consistency and compatibility across all endpoints.

### API Features

- Detailed documentation is generated directly from our implementation code, ensuring accuracy and up-to-date information.
- OAuth2 standards are used for authenticating users and applications, as well as performing application onboarding via the authorization flow.
- Resource-oriented endpoints provide GET, POST, PUT, PATCH, and DELETE functionality across various entities.
- All HTTP communication is conducted exclusively over SSL, both internally between systems and externally with partners.
- Requests and responses are strictly formatted using application/json, including all error responses.
- Our endpoints support cursor-based pagination, enabling efficient data retrieval within a resource.
- We adhere to relevant ISO standards for common values, including ISO 8601 for dates/times, ISO 4217 for currency codes, and ISO 639-1 for language codes and E.164 to represent global phone numbers.

### API Contracts

It is important to understand that the POS Hub API defines schemas for both request, response and webhook payloads. These schemas serve as a contract between POS Hub and API consumers. Compliance with these schemas is crucial, as all fields, data types, required flags, enumerations, and other specifications are validated against this documentation. Careful adherence to this documentation is essential for successful integration with our API.

Our schemas define the following information:

- Property Names: (e.g., orderId, status)
- Property Types: (e.g., string, number, boolean, or another schema)
- Allowed Values: Specified by enumeration tags
- String Length and Numeric Size: Minimum and maximum values
- Value Formatting: Such as uuid, uri, or date-time
- Field Requirements: Required or optional fields

### Authentication

There are multiple methods of authentication depending on what your trying to, typically applications will be using the `client_credentials` flow, however we have outlined the different types below.

#### Password Grant

the `password` grant type is used if you as the account owner wishes to authenticate to gain user level access, this requires a username and password to autheneticate, this is useful for resellers who wish to build in house custom tooling, allowing them to create a user within the reseller and authenticate to perform api calls as that user.

Note: the `password` grant requires POS Hub team to authorize this grant for your application, this is typically only done for enterprise customers, if you need this grant please reach out to one of our team.

#### Client Credentials Grant

the `client_credentials` grant os the grant used when an application wishes to get an an application level access token, this is by applications that need to perform authenticated requests on a location, such as inject an order, update a catalog or pull a menu.

Application credentials allows the application acces to all the locations that it has been authorized for, and the access is further limited to the scopes that the application is allowed and/or requested within the token request.

Example Request

```shell
curl -X POST -H "Content-Type: application/x-www-form-urlencoded" -d "grant_type=client_credentials&client_id=<CLIENT_ID>&client_secret=<CLIENT_SECRET>" "{path}/oauth2/token"
```

Example Response

```json
{ "access_token": "[access-token]", "token_type": "Bearer", "expires_in": 3600 }
```

#### Authorization Code Grant

The `authorization_code` grant is used when an application wishes to initiate the onboarding to a location, the application will prepare an
`/authorize` url which will inlcude the client id, client secret, redirect uri and required scopes, the application should redirect the user to the authoization url, once the user has been redirect to the url, they will be promted to authenticate and authorize your acccess to a selected location of their choosing.

Once the user has authorzed the request, they will be redirected back to the redirect uri with an intermediate token called the `code`, this code contains the users intent to authorize your application, taking this `code` property you can make a follow up call to the token endpoint with this intermediate code
to complete the onboarding steps.

Once the authorization flow us complete, the aplication credentials that are generated with the `client_credentials` flow will now have permission for this new store.

### Client Registration

Before your application can authenticate and access the POS Hub API, you must first create an application within your [POS Hub Developer's](https://tryposhub.com) area. Once your application is created, you will be issued a unique client ID and client secret, which are essential credentials for establishing a secure connection with the API. These credentials ensure that only authorized applications can interact with the POS Hub API, maintaining the integrity and privacy of your data.

### API Security Defintions

<SecurityDefinitions />

### Authenticating Requests

To securely access the POS Hub API, you need to include a valid access token in the Authorization header of your API requests. This access token allows your application to interact with API resources and perform operations on behalf of the user.

To include the access token in your requests, use the Bearer token type in the Authorization header:

```
Authorization: Bearer [access-token]
```

Here's an example of an authenticated request to retrieve a list of orders for an onboarded application:

```
curl -X GET https://api.trypos hub.com/accounts/{accountId}/locations/{locationId}/order/{orderId} \
  -H "Authorization: Bearer [access-token]"
```

**Note: Replace [access-token] with the actual access token you received in the token response.**

### Refresh Token Grant Flow

To ensure secure and uninterrupted access to the POS Hub API, it's important to understand and utilize the refresh token grant flow. This flow allows you to obtain new access tokens without the need to provide client credentials again.

When you obtain an access token through the client credentials grant flow, it has a limited lifespan for security reasons. The duration of the token's validity is typically set to 1 hour, as indicated by the "expires_in" field in the response.

To refresh an expiring access token, your application should make a token refresh request to the `/oauth2/token` endpoint using the refresh token grant type. This request will provide you with a new access token and a new refresh token.

Once you receive the new tokens, replace the old access token and refresh token in your authenticated requests with the new ones. This ensures seamless access to the POS Hub API without interruption.

By proactively managing token expiration and utilizing the refresh token grant flow, you can maintain secure and continuous access to authorized resources in your integrations with the POS Hub API.

## Common Patterns

Our API Is designed to have common and consistent patterns across all the endpoints, patterns such as pagination, filtering, and response envolopes.

### Response

There are two types of responses this API produces:

1. Object Response
   An object response is the structure that is returned when you working with a single item, such as an GET, POST, PUT or patch on an endpoint that ends with an id parameter, such as `/v1/accounts/{accountId}`, these response will always return a JSON Object with a single data field, the value of the data field is the single object you are reading or mutating.

2. List Response
   A list response is the structure that is returned when your working with list of items, such as a `GET` request on an api endpoint that returns a list of objects, such as `/v1/accounts` or `/v1/accounts/{accountId}/locations`.

The fields in the response are:

| property    | description                                                                                                                      |
| ----------- | -------------------------------------------------------------------------------------------------------------------------------- |
| nextPageKey | A `string` that contains a unique pagination key, this can be passed back to the api on subsequent events to fetch the next page |
| hasNextPage | A `boolean` flag that indicates if there is another page of data available based on your current query request                   |
| data        | A `Array<Entity>` list that has the list of entities within the current page of data                                             |

### Pagination

POS Hub employs "Cursor-Based Pagination" instead of the traditional "Offset-Based Pagination" for several key reasons:

1. **Efficiency:** Cursor-based pagination offers faster and more efficient data retrieval, particularly with large datasets. Unlike offset-based pagination, which skips a fixed number of records, cursor-based pagination retrieves the next set of records using a unique identifier (cursor). This approach avoids the overhead of scanning through and skipping records, leading to quicker response times.

2. **Stability:** Cursor-based pagination is more reliable with frequently changing data. In offset-based pagination, adding or removing records between requests can lead to inconsistent results. Cursor-based pagination uses unique cursors, ensuring data remains consistent and accurate even if changes occur.

3. **Predictability:** Cursor-based pagination provides predictable results. When requesting the next page of data using a cursor, you will receive the same records as long as the dataset remains unchanged. This predictability is essential for maintaining data integrity and consistency in your applications.

### Example Flow of Cursor-Based Pagination

1. **Initial Request:** Specify the number of records per page and any filters or sorting criteria in your initial API request. The API will respond with the first page of results and provide a cursor indicating where the next page begins.

```bash
curl -X GET -H "Authorization: Bearer [access-token]" "{path}/orders?limit=10"
```

**Response:**

```json
{ "data": [...], "hasNextPage": true, "nextPageKey": "[next-page-token]" }
```

2. **Subsequent Requests:** To retrieve the next page of results, use the `nextPageKey` value from the previous response in your next request.

```bash
curl -X GET -H "Authorization: Bearer [access-token]" "{path}/orders?limit=10&nextPageKey=[next-page-token]"
```

**Response:**

```json
{ "data": [...], "hasNextPage": true, "nextPageKey": "[next-page-token]" }
```

3. **Repeat:** Continue retrieving subsequent pages by including the `nextPageKey` in your requests until no more pages are available (i.e., `hasNextPage` is false or `nextPageKey` is not present).

 * OpenAPI spec version: 1.8.9.5
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  AccountMenuModifierByIdResponse,
  AccountMenuModifierGroupByIdResponse,
  AccountPatchEntity,
  ApplicationCreateEntity,
  ApplicationPatchEntity,
  CatalogCategoryCreateEntity,
  CatalogCategoryPatchEntity,
  CatalogImportEntity,
  CatalogModifierCreateEntity,
  CatalogModifierGroupCreateEntity,
  CatalogModifierGroupPatchEntity,
  CatalogModifierPatchEntity,
  CatalogProductCreateEntity,
  CatalogProductPatchEntity,
  ConnectionPatchEntity,
  DeliveryCreateEntity,
  DeliveryEntity,
  DeliveryPatchEntity,
  GetAccountByIdResponse,
  GetAccountCatalogCategoryByIdResponse,
  GetAccountCatalogExportResponse,
  GetAccountCatalogModifierByIdResponse,
  GetAccountMenuByIdResponse,
  GetAccountMenuCategoryByIdResponse,
  GetAccountMenuExportResponse,
  GetAccountProductByIdResponse,
  GetAccountProductVariantsResponse,
  GetApplicationByIdResponse,
  GetApplicationInfoResponse,
  GetConnectionByIdResponse,
  GetDeliveryByIdResponse,
  GetDispatchedByIdResponse,
  GetLocationByIdResponse,
  GetOauth2AuthorizeParams,
  GetOrderByIdResponse,
  GetResellerByIdResponse,
  GetUserByIdResponse,
  GetV1AccountsAccountIdConnectionsParams,
  GetV1AccountsAccountIdDeliveriesParams,
  GetV1AccountsAccountIdLocationsLocationIdApplicationsParams,
  GetV1AccountsAccountIdLocationsLocationIdAuditsParams,
  GetV1AccountsAccountIdLocationsLocationIdCatalogCategoriesParams,
  GetV1AccountsAccountIdLocationsLocationIdCatalogModifierGroupsParams,
  GetV1AccountsAccountIdLocationsLocationIdCatalogModifiersParams,
  GetV1AccountsAccountIdLocationsLocationIdCatalogProductsParams,
  GetV1AccountsAccountIdLocationsLocationIdCatalogProductsProductIdVariantsParams,
  GetV1AccountsAccountIdLocationsLocationIdConnectionsParams,
  GetV1AccountsAccountIdLocationsLocationIdDeliveriesParams,
  GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategoriesParams,
  GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemIdVariantsParams,
  GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsParams,
  GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroupsParams,
  GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiersParams,
  GetV1AccountsAccountIdLocationsLocationIdMenusParams,
  GetV1AccountsAccountIdLocationsLocationIdOrdersOrderIdAuditsParams,
  GetV1AccountsAccountIdLocationsLocationIdOrdersOrderIdDeliveriesParams,
  GetV1AccountsAccountIdLocationsLocationIdOrdersParams,
  GetV1AccountsAccountIdLocationsParams,
  GetV1AccountsAccountIdMetricsParams,
  GetV1AccountsAccountIdOrdersOrderIdAuditsParams,
  GetV1AccountsAccountIdOrdersParams,
  GetV1AccountsParams,
  GetV1ResellersParams,
  GetV1ResellersResellerIdAccountsAccountIdLocationsLocationIdApplicationsParams,
  GetV1ResellersResellerIdAccountsAccountIdLocationsLocationIdOrdersParams,
  GetV1ResellersResellerIdAccountsAccountIdLocationsParams,
  GetV1ResellersResellerIdAccountsAccountIdMetricsParams,
  GetV1ResellersResellerIdAccountsParams,
  GetV1ResellersResellerIdAuditsParams,
  GetV1ResellersResellerIdDeliveriesParams,
  GetV1ResellersResellerIdLocationsParams,
  GetV1ResellersResellerIdMetricsParams,
  GetV1ResellersResellerIdOrdersOrderIdAuditsParams,
  GetV1ResellersResellerIdOrdersOrderIdDeliveriesParams,
  GetV1ResellersResellerIdOrdersParams,
  GetV1ResellersResellerIdUsersParams,
  GetV1UsersUserIdApplicationsApplicationIdAuditsParams,
  GetV1UsersUserIdApplicationsParams,
  ListAccountCatalogModifierGroupByIdResponse,
  ListAccountCatalogModifierGroupsResponse,
  ListAccountMenuCategoriesResponse,
  ListAccountMenuItemByIdResponse,
  ListAccountMenuItemVariantsResponse,
  ListAccountMenuItemsResponse,
  ListAccountMenuModifierGroupsResponse,
  ListAccountMenuModifiersResponse,
  ListAccountMenusResponse,
  ListAccountsResponse,
  ListApplicationsInfoResponse,
  ListApplicationsResponse,
  ListAuditsResponse,
  ListCatalogCategoriesResponse,
  ListCatalogModifiersResponse,
  ListConnectionsResponse,
  ListDeliveriesResponse,
  ListLocationsResponse,
  ListOrdersResponse,
  ListProductsResponse,
  ListResellersResponse,
  ListUsersResponse,
  LocationCreateEntity,
  LocationPatchEntity,
  MenuCategoryCreateEntity,
  MenuCategoryPatchEntity,
  MenuCreateEntity,
  MenuItemCreateEntity,
  MenuItemPatchEntity,
  MenuModifierCreateEntity,
  MenuModifierGroupCreateEntity,
  MenuModifierGroupPatchEntity,
  MenuModifierPatchEntity,
  MenuPatchEntity,
  MenuPublishCreateEntity,
  MenuRearrangeRequest,
  OrderCreateEntity,
  OrderPatchEntity,
  ResellerAccountCreateEntity,
  ResellerAccountPatchEntity,
  ResellerDeliveryCreateEntity,
  ResellerLocationCreateEntity,
  ResellerLocationPatchEntity,
  ResellerUserPatchEntity,
  SignedUrlRequest,
  SignedUrlResponse,
  TokenRequest,
  TokenResponse,
  UserCreateEntity,
  UserPatchEntity
} from './index.schemas';




  export const getPOSHubAPI = () => {
/**
 * This endpoint lists all locations that are associated with a specific reseller identified by the resellerId parameter. The data returned includes location identifiers, names, and other relevant details. This endpoint is useful for managing and monitoring the various locations under a reseller's control.
 * @summary List Locations
 */
const getV1ResellersResellerIdLocations = <TData = AxiosResponse<ListLocationsResponse>>(
    resellerId: string,
    params?: GetV1ResellersResellerIdLocationsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/locations`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new location under a specific reseller. Administrators can define the location's details, such as its name, address, and other attributes. Once created, the location will be associated with the reseller and available for management within the system.
 * @summary Create Location
 */
const postV1ResellersResellerIdLocations = <TData = AxiosResponse<GetLocationByIdResponse>>(
    resellerId: string,
    resellerLocationCreateEntity: ResellerLocationCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/resellers/${resellerId}/locations`,
      resellerLocationCreateEntity,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific user associated with a reseller, identified by the userId parameter. It returns comprehensive data about the user, including their role, status, and associated accounts, making it useful for managing individual user details.
 * @summary Get User
 */
const getV1ResellersResellerIdUsersUserId = <TData = AxiosResponse<GetUserByIdResponse>>(
    resellerId: string,
    userId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/users/${userId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific user under a reseller. Administrators can modify various aspects of the user's profile, such as their role, status, or other attributes, ensuring that the user's information remains current and accurate.
 * @summary Update User
 */
const patchV1ResellersResellerIdUsersUserId = <TData = AxiosResponse<GetUserByIdResponse>>(
    resellerId: string,
    userId: string,
    resellerUserPatchEntity: ResellerUserPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/resellers/${resellerId}/users/${userId}`,
      resellerUserPatchEntity,options
    );
  }

/**
 * This endpoint retrieves a list of all connections associated with a specific account. The data returned includes connection identifiers, types, and statuses, providing a comprehensive overview of the external systems and services linked to the account. Users can use this information to manage and monitor connections, ensuring they remain active and properly configured.
 * @summary Get Connections
 */
const getV1AccountsAccountIdConnections = <TData = AxiosResponse<ListConnectionsResponse>>(
    accountId: string,
    params?: GetV1AccountsAccountIdConnectionsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/connections`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint retrieves a list of all audits associated with a specific order under a reseller. The data includes audit identifiers, actions, and other relevant details, providing a comprehensive overview of the order audits managed by the reseller.
 * @summary Get Order Audits
 */
const getV1ResellersResellerIdOrdersOrderIdAudits = <TData = AxiosResponse<ListAuditsResponse>>(
    resellerId: string,
    orderId: string,
    params?: GetV1ResellersResellerIdOrdersOrderIdAuditsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/orders/${orderId}/audits`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint provides metrics and statistical data for a specific reseller. It allows administrators to view performance metrics, trends, and other analytical information related to the reseller's activities. This data is essential for monitoring the reseller's performance over time.
 * @summary Get Metrics
 */
const getV1ResellersResellerIdMetrics = <TData = AxiosResponse<unknown>>(
    resellerId: string,
    params?: GetV1ResellersResellerIdMetricsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/metrics`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint retrieves a list of all deliveries associated with a specific order under a reseller. The data returned includes delivery identifiers, statuses, and other relevant details, providing a comprehensive overview of all deliveries managed by the reseller.
 * @summary List Order Deliveries
 */
const getV1ResellersResellerIdOrdersOrderIdDeliveries = <TData = AxiosResponse<ListDeliveriesResponse>>(
    resellerId: string,
    orderId: string,
    params?: GetV1ResellersResellerIdOrdersOrderIdDeliveriesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/orders/${orderId}/deliveries`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint retrieves detailed information about a specific delivery associated with a reseller, identified by the deliveryId parameter. It returns comprehensive data about the delivery, including pickup time, status, and other relevant details.
 * @summary Get Delivery
 */
const getV1ResellersResellerIdDeliveriesDeliveryId = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    resellerId: string,
    deliveryId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/deliveries/${deliveryId}`,options
    );
  }

/**
 * This endpoint allows for exporting a specific menu at a location. The menu data will be provided in a downloadable format, such as CSV or JSON, making it easy for administrators to back up or transfer menu information to other systems.
 * @summary Export Menu
 */
const getV1AccountsAccountIdLocationsLocationIdMenusMenuIdExport = <TData = AxiosResponse<GetAccountMenuExportResponse>>(
    accountId: string,
    locationId: string,
    menuId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/export`,options
    );
  }

/**
 * This endpoint is used to authorize a client application via the OAuth2 protocol. It initiates the OAuth2 authorization process, allowing the client to request permission from the resource owner to access protected resources. The response typically includes an authorization code that can be exchanged for an access token, this is used when onboarding a new client application.
 * @summary Authorize
 */
const getOauth2Authorize = <TData = AxiosResponse<unknown>>(
    params: GetOauth2AuthorizeParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/oauth2/authorize`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint retrieves detailed information about a specific delivery associated with a location, identified by the deliveryId parameter. It provides comprehensive data about the delivery, including items, status, and other relevant details, making it useful for managing individual deliveries.
 * @summary Get Delivery
 */
const getV1AccountsAccountIdLocationsLocationIdDeliveriesDeliveryId = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    accountId: string,
    locationId: string,
    deliveryId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/deliveries/${deliveryId}`,options
    );
  }

/**
 * This endpoint retrieves a list of all menus associated with a specific location under an account. The data includes menu identifiers, names, and other relevant details, providing an overview of the menus that are available or active at the location.
 * @summary List Menus
 */
const getV1AccountsAccountIdLocationsLocationIdMenus = <TData = AxiosResponse<ListAccountMenusResponse>>(
    accountId: string,
    locationId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdMenusParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/menus`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new menu under a specific location associated with an account. Administrators can define the menu's details, including its name, items, and categories. Once created, the menu will be linked to the location and managed accordingly.
 * @summary Create Menu
 */
const postV1AccountsAccountIdLocationsLocationIdMenus = <TData = AxiosResponse<GetAccountMenuByIdResponse>>(
    accountId: string,
    locationId: string,
    menuCreateEntity: MenuCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/locations/${locationId}/menus`,
      menuCreateEntity,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific reseller identified by the resellerId parameter. It returns data such as the reseller's name, contact details, and any other associated information. This endpoint is useful for viewing or managing a particular reseller's details.
 * @summary Get Reseller
 */
const getV1ResellersResellerId = <TData = AxiosResponse<GetResellerByIdResponse>>(
    resellerId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific reseller identified by the resellerId parameter. Administrators can use this endpoint to modify details such as contact information, status, or other attributes related to the reseller.
 * @summary Update Reseller
 */
const patchV1ResellersResellerId = <TData = AxiosResponse<GetResellerByIdResponse>>(
    resellerId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/resellers/${resellerId}`,undefined,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific delivery associated with an order, identified by the deliveryId parameter. It provides comprehensive data about the delivery, including its status, driver information, and delivery location, allowing for effective tracking and management of the delivery.
 * @summary Get Delivery
 */
const getV1AccountsAccountIdLocationsLocationIdOrdersOrderIdDeliveriesDeliveryId = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    accountId: string,
    locationId: string,
    orderId: string,
    deliveryId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/orders/${orderId}/deliveries/${deliveryId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific delivery associated with an order. Users can modify details such as the delivery's status, driver information, or location, ensuring that the delivery remains accurate and aligned with the order's requirements.
 * @summary Update Delivery
 */
const patchV1AccountsAccountIdLocationsLocationIdOrdersOrderIdDeliveriesDeliveryId = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    accountId: string,
    locationId: string,
    orderId: string,
    deliveryId: string,
    deliveryPatchEntity: DeliveryPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/locations/${locationId}/orders/${orderId}/deliveries/${deliveryId}`,
      deliveryPatchEntity,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific modifier group within a catalog at a location, identified by the modifierGroupId parameter. It provides comprehensive data about the modifier group, including its modifiers and status, allowing for effective management and updates.
 * @summary Get Modifier Group
 */
const getV1AccountsAccountIdLocationsLocationIdCatalogModifierGroupsModifierGroupId = <TData = AxiosResponse<ListAccountCatalogModifierGroupByIdResponse>>(
    accountId: string,
    locationId: string,
    modifierGroupId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/modifier-groups/${modifierGroupId}`,options
    );
  }

/**
 * This endpoint allows for the deletion of a specific modifier group within a catalog at a location. The modifierGroupId parameter identifies the group to be deleted, which will remove it from the system and disassociate it from the catalog.
 * @summary Delete Modifier Group
 */
const deleteV1AccountsAccountIdLocationsLocationIdCatalogModifierGroupsModifierGroupId = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string,
    modifierGroupId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/modifier-groups/${modifierGroupId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific modifier group within a catalog at a location. Users can modify the modifier group's details, such as its name, modifiers, or availability, ensuring that the group remains current and aligned with the catalog's customization options.
 * @summary Update Modifier Group
 */
const patchV1AccountsAccountIdLocationsLocationIdCatalogModifierGroupsModifierGroupId = <TData = AxiosResponse<ListAccountCatalogModifierGroupByIdResponse>>(
    accountId: string,
    locationId: string,
    modifierGroupId: string,
    catalogModifierGroupPatchEntity: CatalogModifierGroupPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/modifier-groups/${modifierGroupId}`,
      catalogModifierGroupPatchEntity,options
    );
  }

/**
 * This endpoint retrieves a list of all products within a catalog associated with a specific location under an account. The data includes product identifiers, names, descriptions, and pricing, providing an overview of the products available in the catalog. This information is essential for managing the catalog's inventory and offerings.
 * @summary Get Catalog Products
 */
const getV1AccountsAccountIdLocationsLocationIdCatalogProducts = <TData = AxiosResponse<ListProductsResponse>>(
    accountId: string,
    locationId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdCatalogProductsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/products`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new product within a catalog at a specific location. Users can define the product's details, including its name, description, pricing, and associated categories. Once created, the product will be available for sale within the catalog, enhancing the catalog's inventory and offerings.
 * @summary Create Catalog Product
 */
const postV1AccountsAccountIdLocationsLocationIdCatalogProducts = <TData = AxiosResponse<GetAccountProductByIdResponse>>(
    accountId: string,
    locationId: string,
    catalogProductCreateEntity: CatalogProductCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/products`,
      catalogProductCreateEntity,options
    );
  }

/**
 * This endpoint retrieves audit logs for a specific application associated with a user. The logs provide detailed records of actions and changes made within the application, allowing administrators to review and analyze user activity for compliance and security purposes.
 * @summary Get Audits
 */
const getV1UsersUserIdApplicationsApplicationIdAudits = <TData = AxiosResponse<ListAuditsResponse>>(
    userId: string,
    applicationId: string,
    params?: GetV1UsersUserIdApplicationsApplicationIdAuditsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/users/${userId}/applications/${applicationId}/audits`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint retrieves detailed information about a specific application, identified by the applicationId parameter. It provides comprehensive data such as the application's name, description, and status, making it useful for managing or auditing the application.
 * @summary Get Application
 */
const getV1ApplicationsApplicationId = <TData = AxiosResponse<GetApplicationInfoResponse>>(
    applicationId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/applications/${applicationId}`,options
    );
  }

/**
 * This endpoint allows for the cancellation of a dispatched delivery, this endpoint is typically used by the delivery application that is managing the delivery process.
 * @summary Cancel Dispatched Delivery
 */
const postV1ResellersResellerIdDeliveriesDeliveryIdDispatchDispatchIdCancel = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    resellerId: string,
    deliveryId: string,
    dispatchId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/resellers/${resellerId}/deliveries/${deliveryId}/dispatch/${dispatchId}/cancel`,undefined,options
    );
  }

/**
 * This endpoint triggers a pull from a specific connection associated with a location under an account. The pull process retrieves the latest catalog data from the connected system or service, updating the account with the most recent information. Proper authorization is required to perform this action, and it is typically used by users to synchronize data across systems.
 * @summary Pull the catalog from a given POS connection
 */
const postV1AccountsAccountIdLocationsLocationIdConnectionsConnectionIdPull = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string,
    connectionId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/locations/${locationId}/connections/${connectionId}/pull`,undefined,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific delivery associated with an account, identified by the deliveryId parameter. It provides comprehensive data about the delivery, including items, status, and other relevant details, making it useful for managing individual deliveries.
 * @summary Get Delivery
 */
const getV1AccountsAccountIdDeliveriesDeliveryId = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    accountId: string,
    deliveryId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/deliveries/${deliveryId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific delivery associated with an account. Users can modify various aspects of the delivery, such as its status, items, or other attributes, ensuring that the delivery remains current and accurate.
 * @summary Update Delivery
 */
const patchV1AccountsAccountIdDeliveriesDeliveryId = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    accountId: string,
    deliveryId: string,
    deliveryPatchEntity: DeliveryPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/deliveries/${deliveryId}`,
      deliveryPatchEntity,options
    );
  }

/**
 * This endpoint retrieves a list of all accounts associated with a specific reseller. The data returned includes account identifiers, names, and other relevant details. This endpoint is particularly useful for resellers and administrators who need to manage or monitor accounts under their jurisdiction.
 * @summary List Accounts
 */
const getV1ResellersResellerIdAccounts = <TData = AxiosResponse<ListAccountsResponse>>(
    resellerId: string,
    params?: GetV1ResellersResellerIdAccountsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/accounts`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new account under a specific reseller. Administrators can define the account's details, such as its name, contact information, and other attributes. Once created, the account will be associated with the reseller and can be managed through the system.
 * @summary Create Account
 */
const postV1ResellersResellerIdAccounts = <TData = AxiosResponse<GetAccountByIdResponse>>(
    resellerId: string,
    resellerAccountCreateEntity: ResellerAccountCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/resellers/${resellerId}/accounts`,
      resellerAccountCreateEntity,options
    );
  }

/**
 * This endpoint retrieves metrics and performance data for a specific location associated with an account. It allows administrators to monitor the location's usage, operational efficiency, and other key performance indicators, providing insights for better management and decision-making.
 * @summary Get Metrics
 */
const getV1AccountsAccountIdLocationsLocationIdMetrics = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/metrics`,options
    );
  }

/**
 * This endpoint retrieves a list of all accounts in the system. The data returned includes account identifiers, names, and other relevant details, providing a comprehensive overview of the account base within the platform.
 * @summary List Accounts
 */
const getV1Accounts = <TData = AxiosResponse<ListAccountsResponse>>(
    params?: GetV1AccountsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new account in the system, providing essential details such as the account's name, contact information, and other attributes. Once created, the account will be available for management and monitoring within the platform.
 * @summary Create Account
 */
const postV1Accounts = <TData = AxiosResponse<GetAccountByIdResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts`,undefined,options
    );
  }

/**
 * This endpoint retrieves a list of all orders associated with a specific reseller. It returns order identifiers, status, and other relevant details. This endpoint is useful for resellers and administrators to monitor and manage orders across all accounts under their jurisdiction.
 * @summary List Reseller Orders
 */
const getV1ResellersResellerIdOrders = <TData = AxiosResponse<ListOrdersResponse>>(
    resellerId: string,
    params?: GetV1ResellersResellerIdOrdersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/orders`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint lists all the resellers that your have access to. The data returned includes reseller identifiers, names, and other relevant details. This endpoint is useful for managing and monitoring the resellers that you have access to.
 * @summary List Resellers
 */
const getV1Resellers = <TData = AxiosResponse<ListResellersResponse>>(
    params?: GetV1ResellersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint retrieves detailed information about a specific dispatch associated with a delivery at a location, identified by the dispatchId parameter. It provides comprehensive data about the dispatch, including status, driver information, and other relevant details.
 * @summary Get Dispatched delivery by dispatch id
 */
const getV1AccountsAccountIdLocationsLocationIdDeliveriesDeliveryIdDispatchDispatchId = <TData = AxiosResponse<GetDispatchedByIdResponse>>(
    accountId: string,
    locationId: string,
    deliveryId: string,
    dispatchId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/deliveries/${deliveryId}/dispatch/${dispatchId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific dispatch associated with a delivery at a location. Administrators can modify various aspects of the dispatch, such as its status, driver information, or other attributes, ensuring that the dispatch remains current and accurate.
 * @summary Update Dispatch Delivery
 */
const patchV1AccountsAccountIdLocationsLocationIdDeliveriesDeliveryIdDispatchDispatchId = <TData = AxiosResponse<GetDispatchedByIdResponse>>(
    accountId: string,
    locationId: string,
    deliveryId: string,
    dispatchId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/locations/${locationId}/deliveries/${deliveryId}/dispatch/${dispatchId}`,undefined,options
    );
  }

/**
 * This endpoint retrieves a list of all items associated with a specific menu at a location. The data includes item identifiers, names, and other relevant details, providing an overview of the items available within the menu at the specified location.
 * @summary List Items
 */
const getV1AccountsAccountIdLocationsLocationIdMenusMenuIdItems = <TData = AxiosResponse<ListAccountMenuItemsResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/items`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new item within a specific menu at a location. Administrators can define the item's details, including its name, description, and pricing. Once created, the item will be part of the menu and available to customers.
 * @summary Create Item
 */
const postV1AccountsAccountIdLocationsLocationIdMenusMenuIdItems = <TData = AxiosResponse<ListAccountMenuItemByIdResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    menuItemCreateEntity: MenuItemCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/items`,
      menuItemCreateEntity,options
    );
  }

/**
 * This endpoint allows for the refresh of a specific delivery associated with an order under a reseller. The deliveryId parameter identifies the delivery to be refreshed. This operation will update the delivery status and make it available for further processing.
 * @summary Refresh Order Delivery
 */
const postV1ResellersResellerIdOrdersOrderIdDeliveriesDeliveryIdRefresh = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    resellerId: string,
    orderId: string,
    deliveryId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/resellers/${resellerId}/orders/${orderId}/deliveries/${deliveryId}/refresh`,undefined,options
    );
  }

/**
 * This endpoint retrieves audit logs for a specific order associated with a location. The logs provide detailed records of actions and changes made to the order, allowing users to review and analyze order history for compliance, troubleshooting, and quality assurance purposes.
 * @summary Get Order Audits
 */
const getV1AccountsAccountIdLocationsLocationIdOrdersOrderIdAudits = <TData = AxiosResponse<ListAuditsResponse>>(
    accountId: string,
    locationId: string,
    orderId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdOrdersOrderIdAuditsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/orders/${orderId}/audits`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint retrieves a list of all applications associated with a specific user. The data includes application identifiers, names, and other relevant details, providing a comprehensive overview of the applications that the user can access or manage.
 * @summary List Applications
 */
const getV1UsersUserIdApplications = <TData = AxiosResponse<ListApplicationsResponse>>(
    userId: string,
    params?: GetV1UsersUserIdApplicationsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/users/${userId}/applications`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new application associated with a specific user. Administrators can configure the application's details, including its name and settings, providing the user with access to the application's features and capabilities.
 * @summary Create Application
 */
const postV1UsersUserIdApplications = <TData = AxiosResponse<GetApplicationByIdResponse>>(
    userId: string,
    applicationCreateEntity: ApplicationCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/users/${userId}/applications`,
      applicationCreateEntity,options
    );
  }

/**
 * This endpoint retrieves metrics and performance data for a specific application associated with a user. It allows administrators to monitor the application's usage and effectiveness, providing insights that can inform decisions about resource allocation and user engagement.
 * @summary Get Metrics
 */
const getV1UsersUserIdApplicationsApplicationIdMetrics = <TData = AxiosResponse<unknown>>(
    userId: string,
    applicationId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/users/${userId}/applications/${applicationId}/metrics`,options
    );
  }

/**
 * This endpoint allows for uploading an image for a specific application associated with a user. The image can be used for branding or identification purposes within the application. Proper authorization is required to perform this action, and the image must meet the specified requirements.
 * @summary Request Image Upload
 */
const postV1UsersUserIdApplicationsApplicationIdImage = <TData = AxiosResponse<SignedUrlResponse>>(
    userId: string,
    applicationId: string,
    signedUrlRequest: SignedUrlRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/users/${userId}/applications/${applicationId}/image`,
      signedUrlRequest,options
    );
  }

/**
 * This endpoint allows for the deletion of an image associated with a specific application linked to a user. Once deleted, the image will no longer be displayed in the application, and users will need to upload a new image if necessary.
 * @summary Delete Image
 */
const deleteV1UsersUserIdApplicationsApplicationIdImage = <TData = AxiosResponse<unknown>>(
    userId: string,
    applicationId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/users/${userId}/applications/${applicationId}/image`,options
    );
  }

/**
 * This endpoint retrieves a list of all modifiers associated with a specific menu at a location. The data includes modifier identifiers, names, and other relevant details, providing an overview of the modifiers available within the menu at the specified location.
 * @summary List Modifiers
 */
const getV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiers = <TData = AxiosResponse<ListAccountMenuModifiersResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/modifiers`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new modifier within a specific menu at a location. Users can define the modifier's details, including its name, description, and pricing. Once created, the modifier will be part of the menu and available for use in customizing menu items.
 * @summary Create Modifier
 */
const postV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiers = <TData = AxiosResponse<AccountMenuModifierByIdResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    menuModifierCreateEntity: MenuModifierCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/modifiers`,
      menuModifierCreateEntity,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific product within a catalog at a location, identified by the productId parameter. It provides comprehensive data about the product, including its description, pricing, and availability, allowing for effective management and updates.
 * @summary Get Catalog Product
 */
const getV1AccountsAccountIdLocationsLocationIdCatalogProductsProductId = <TData = AxiosResponse<GetAccountProductByIdResponse>>(
    accountId: string,
    locationId: string,
    productId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/products/${productId}`,options
    );
  }

/**
 * This endpoint allows for the deletion of a specific product within a catalog at a location. The productId parameter identifies the product to be deleted, which will remove it from the system and disassociate it from the catalog.
 * @summary Delete Catalog Product
 */
const deleteV1AccountsAccountIdLocationsLocationIdCatalogProductsProductId = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string,
    productId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/products/${productId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific product within a catalog at a location. Users can modify the product's details, such as its name, description, pricing, or availability, ensuring that the product remains current and aligned with the catalog's inventory and offerings.
 * @summary Update Catalog Product
 */
const patchV1AccountsAccountIdLocationsLocationIdCatalogProductsProductId = <TData = AxiosResponse<GetAccountProductByIdResponse>>(
    accountId: string,
    locationId: string,
    productId: string,
    catalogProductPatchEntity: CatalogProductPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/products/${productId}`,
      catalogProductPatchEntity,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific application associated with a user. It provides data such as the application's name, description, and status, making it useful for managing the user's access to the application.
 * @summary Get Application
 */
const getV1UsersUserIdApplicationsApplicationId = <TData = AxiosResponse<GetApplicationByIdResponse>>(
    userId: string,
    applicationId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/users/${userId}/applications/${applicationId}`,options
    );
  }

/**
 * This endpoint allows for the deletion of a specific application associated with a user. The applicationId parameter identifies the application to be removed, and once deleted, the user will no longer have access to that application.
 * @summary Delete Application
 */
const deleteV1UsersUserIdApplicationsApplicationId = <TData = AxiosResponse<unknown>>(
    userId: string,
    applicationId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/users/${userId}/applications/${applicationId}`,options
    );
  }

/**
 * This endpoint allows for updating the details of a specific application associated with a user. Administrators can modify the application's settings, ensuring that it aligns with the user's needs and access rights.
 * @summary Update Application
 */
const patchV1UsersUserIdApplicationsApplicationId = <TData = AxiosResponse<GetApplicationByIdResponse>>(
    userId: string,
    applicationId: string,
    applicationPatchEntity: ApplicationPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/users/${userId}/applications/${applicationId}`,
      applicationPatchEntity,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific connection associated with an account, identified by the connectionId parameter. It provides comprehensive data about the connection, including its configuration, status, and associated services, allowing for effective management and troubleshooting.
 * @summary Get Connection Details
 */
const getV1AccountsAccountIdConnectionsConnectionId = <TData = AxiosResponse<GetConnectionByIdResponse>>(
    accountId: string,
    connectionId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/connections/${connectionId}`,options
    );
  }

/**
 * This endpoint allows for the refresh of a specific delivery associated with an order under a reseller. The deliveryId parameter identifies the delivery to be refreshed. This operation will update the delivery status and make it available for further processing.
 * @summary Refresh Delivery Quotes
 */
const postV1ResellersResellerIdDeliveriesDeliveryIdRefresh = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    resellerId: string,
    deliveryId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/resellers/${resellerId}/deliveries/${deliveryId}/refresh`,undefined,options
    );
  }

/**
 * This endpoint retrieves a list of all deliveries associated with a specific account. The data returned includes delivery identifiers, statuses, and other relevant details, providing a comprehensive overview of all deliveries managed by the account.
 * @summary List Deliveries
 */
const getV1AccountsAccountIdDeliveries = <TData = AxiosResponse<ListDeliveriesResponse>>(
    accountId: string,
    params?: GetV1AccountsAccountIdDeliveriesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/deliveries`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new delivery under a specific account. Users can define the delivery details, such as items, pickup time, and other attributes. Once created, the delivery will be associated with the account and managed accordingly.
 * @summary Create Delivery
 */
const postV1AccountsAccountIdDeliveries = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    accountId: string,
    deliveryCreateEntity: DeliveryCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/deliveries`,
      deliveryCreateEntity,options
    );
  }

/**
 * This endpoint retrieves a list of all applications available in the system. The data returned includes application identifiers, names, and descriptions, providing an overview of the applications that can be managed or integrated with the platform.
 * @summary List Applications
 */
const getV1Applications = <TData = AxiosResponse<ListApplicationsInfoResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/applications`,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific user identified by the userId parameter. It provides comprehensive data about the user, including their personal details, role, and account associations. This information is crucial for managing user permissions and access.
 * @summary Get User
 */
const getV1UsersUserId = <TData = AxiosResponse<GetUserByIdResponse>>(
    userId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/users/${userId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific user in the system. Administrators can modify the user's details, such as their role, status, or personal information, ensuring that their profile remains up-to-date and accurately reflects their access rights.
 * @summary Update User
 */
const patchV1UsersUserId = <TData = AxiosResponse<GetUserByIdResponse>>(
    userId: string,
    userPatchEntity: UserPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/users/${userId}`,
      userPatchEntity,options
    );
  }

/**
 * This endpoint retrieves a list of all deliveries associated with a specific location under an account. The data returned includes delivery identifiers, statuses, and other relevant details, providing a comprehensive overview of all deliveries managed by the location.
 * @summary List Deliveries
 */
const getV1AccountsAccountIdLocationsLocationIdDeliveries = <TData = AxiosResponse<ListDeliveriesResponse>>(
    accountId: string,
    locationId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdDeliveriesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/deliveries`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint retrieves a list of all modifier groups associated with a specific menu at a location. The data includes modifier group identifiers, names, and other relevant details, providing an overview of the modifier groups available within the menu at the specified location.
 * @summary List Modifier Groups
 */
const getV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroups = <TData = AxiosResponse<ListAccountMenuModifierGroupsResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroupsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/modifier-groups`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new modifier group within a specific menu at a location. Administrators can define the modifier group's details, including its name and associated modifiers. Once created, the modifier group will be part of the menu and available for use in customizing menu items.
 * @summary Create Modifier Group
 */
const postV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroups = <TData = AxiosResponse<AccountMenuModifierGroupByIdResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    menuModifierGroupCreateEntity: MenuModifierGroupCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/modifier-groups`,
      menuModifierGroupCreateEntity,options
    );
  }

/**
 * This endpoint allows for the cancellation of a specific delivery associated with an account. The deliveryId parameter identifies the delivery to be canceled, which will update its status and make it unavailable for further processing.
 * @summary Cancel Delivery
 */
const postV1AccountsAccountIdDeliveriesDeliveryIdCancel = <TData = AxiosResponse<unknown>>(
    accountId: string,
    deliveryId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/deliveries/${deliveryId}/cancel`,undefined,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific location associated with a reseller, identified by the locationId parameter. It returns comprehensive data about the location, such as its address, status, and operational details. This is useful for viewing or managing a specific location's details.
 * @summary Get Location
 */
const getV1ResellersResellerIdLocationsLocationId = <TData = AxiosResponse<GetLocationByIdResponse>>(
    resellerId: string,
    locationId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/locations/${locationId}`,options
    );
  }

/**
 * This endpoint allows for the deletion of a specific location associated with a reseller. The locationId parameter identifies the location to be deleted. This operation will remove the location from the system, and it will no longer be available for any operations.
 * @summary Delete Location
 */
const deleteV1ResellersResellerIdLocationsLocationId = <TData = AxiosResponse<unknown>>(
    resellerId: string,
    locationId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/resellers/${resellerId}/locations/${locationId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific location under a reseller, identified by the locationId parameter. Administrators can modify various aspects of the location, such as its address, hours of operation, or other relevant details.
 * @summary Update Location
 */
const patchV1ResellersResellerIdLocationsLocationId = <TData = AxiosResponse<GetLocationByIdResponse>>(
    resellerId: string,
    locationId: string,
    resellerLocationPatchEntity: ResellerLocationPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/resellers/${resellerId}/locations/${locationId}`,
      resellerLocationPatchEntity,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific modifier within a menu at a location, identified by the modifierId parameter. It provides comprehensive data about the modifier, including its description, pricing, and availability, allowing for effective management and updates.
 * @summary Get Modifier
 */
const getV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiersModifierId = <TData = AxiosResponse<AccountMenuModifierByIdResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    modifierId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/modifiers/${modifierId}`,options
    );
  }

/**
 * This endpoint allows for the deletion of a specific modifier within a menu at a location. The modifierId parameter identifies the modifier to be deleted, which will remove it from the system and disassociate it from the menu.
 * @summary Delete Modifier
 */
const deleteV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiersModifierId = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string,
    menuId: string,
    modifierId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/modifiers/${modifierId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific modifier within a menu at a location. Users can modify various aspects of the modifier, such as its description, pricing, or availability, ensuring that the modifier remains current and aligned with the menu's offerings.
 * @summary Update Modifier
 */
const patchV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiersModifierId = <TData = AxiosResponse<AccountMenuModifierByIdResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    modifierId: string,
    menuModifierPatchEntity: MenuModifierPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/modifiers/${modifierId}`,
      menuModifierPatchEntity,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific account identified by the accountId parameter. It provides comprehensive data about the account, including its contact details, status, and associated resources, making it useful for managing individual accounts.
 * @summary Get Account
 */
const getV1AccountsAccountId = <TData = AxiosResponse<GetAccountByIdResponse>>(
    accountId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific account in the system. the owner can modify various aspects of the account, such as its contact information, status, or other relevant details, ensuring that the account's information remains current and accurate.
 * @summary Update Account
 */
const patchV1AccountsAccountId = <TData = AxiosResponse<GetAccountByIdResponse>>(
    accountId: string,
    accountPatchEntity: AccountPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}`,
      accountPatchEntity,options
    );
  }

/**
 * This endpoint retrieves audit logs for a specific order associated with an account. The logs provide detailed records of actions and changes made to the order, allowing users to review and analyze activity for compliance and security purposes.
 * @summary Get Audits
 */
const getV1AccountsAccountIdOrdersOrderIdAudits = <TData = AxiosResponse<ListAuditsResponse>>(
    accountId: string,
    orderId: string,
    params?: GetV1AccountsAccountIdOrdersOrderIdAuditsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/orders/${orderId}/audits`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint retrieves a list of all modifiers within a catalog associated with a specific location under an account. The data includes modifier identifiers, names, and other relevant details, providing an overview of the modifiers available in the catalog. This information is essential for managing the catalog's customization options and enhancing the customer experience.
 * @summary Get Catalog Modifiers
 */
const getV1AccountsAccountIdLocationsLocationIdCatalogModifiers = <TData = AxiosResponse<ListCatalogModifiersResponse>>(
    accountId: string,
    locationId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdCatalogModifiersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/modifiers`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new modifier within a catalog at a specific location. Users can define the modifier's details, including its name, description, and pricing. Once created, the modifier will be available for use in customizing products within the catalog, enhancing the catalog's offerings and customer satisfaction.
 * @summary Create Catalog Modifier
 */
const postV1AccountsAccountIdLocationsLocationIdCatalogModifiers = <TData = AxiosResponse<GetAccountCatalogModifierByIdResponse>>(
    accountId: string,
    locationId: string,
    catalogModifierCreateEntity: CatalogModifierCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/modifiers`,
      catalogModifierCreateEntity,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific location under an account, identified by the locationId parameter. The response includes comprehensive data such as the location's name, address, and operational status, allowing administrators to manage the location effectively.
 * @summary Get Location
 */
const getV1ResellersResellerIdAccountsAccountIdLocationsLocationId = <TData = AxiosResponse<GetLocationByIdResponse>>(
    resellerId: string,
    accountId: string,
    locationId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/accounts/${accountId}/locations/${locationId}`,options
    );
  }

/**
 * This endpoint allows for the deletion of a specific location under an account. The locationId parameter identifies the location to be deleted, which will remove it from the system and disassociate it from the account.
 * @summary Delete Location
 */
const deleteV1ResellersResellerIdAccountsAccountIdLocationsLocationId = <TData = AxiosResponse<unknown>>(
    resellerId: string,
    accountId: string,
    locationId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/resellers/${resellerId}/accounts/${accountId}/locations/${locationId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific location under an account associated with a reseller. Administrators can modify details such as the location's address, hours of operation, or other attributes to keep the information current and accurate.
 * @summary Update Location
 */
const patchV1ResellersResellerIdAccountsAccountIdLocationsLocationId = <TData = AxiosResponse<GetLocationByIdResponse>>(
    resellerId: string,
    accountId: string,
    locationId: string,
    locationPatchEntity: LocationPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/resellers/${resellerId}/accounts/${accountId}/locations/${locationId}`,
      locationPatchEntity,options
    );
  }

/**
 * This endpoint retrieves a list of all categories associated with a specific menu at a location. The data includes category identifiers, names, and other relevant details, providing an overview of the categories available within the menu at the specified location.
 * @summary List Categories
 */
const getV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategories = <TData = AxiosResponse<ListAccountMenuCategoriesResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategoriesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/categories`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new category within a specific menu associated with a location. Administrators can define the category's details, including its name and associated items. Once created, the category will be part of the menu and available to customers.
 * @summary Create Category
 */
const postV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategories = <TData = AxiosResponse<GetAccountMenuCategoryByIdResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    menuCategoryCreateEntity: MenuCategoryCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/categories`,
      menuCategoryCreateEntity,options
    );
  }

/**
 * This endpoint retrieves a list of all variants associated with a specific item in a menu at a location. The data includes variant identifiers, names, and other relevant details, providing an overview of the variants available for the item within the specified menu.
 * @summary List Variants
 */
const getV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemIdVariants = <TData = AxiosResponse<ListAccountMenuItemVariantsResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    itemId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemIdVariantsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/items/${itemId}/variants`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint retrieves detailed information about a specific modifier group within a menu at a location, identified by the modifierGroupId parameter. It provides comprehensive data about the modifier group, including its modifiers and status, allowing for effective management and updates.
 * @summary Get Modifier Group
 */
const getV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroupsModifierGroupId = <TData = AxiosResponse<AccountMenuModifierGroupByIdResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    modifierGroupId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/modifier-groups/${modifierGroupId}`,options
    );
  }

/**
 * This endpoint allows for the deletion of a specific modifier group within a menu at a location. The modifierGroupId parameter identifies the group to be deleted, which will remove it from the system and disassociate it from the menu.
 * @summary Delete Modifier Group
 */
const deleteV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroupsModifierGroupId = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string,
    menuId: string,
    modifierGroupId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/modifier-groups/${modifierGroupId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific modifier group within a menu at a location. Administrators can modify various aspects of the modifier group, such as its name, modifiers, or availability, ensuring that the group remains current and aligned with the menu's offerings.
 * @summary Update Modifier Group
 */
const patchV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroupsModifierGroupId = <TData = AxiosResponse<AccountMenuModifierGroupByIdResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    modifierGroupId: string,
    menuModifierGroupPatchEntity: MenuModifierGroupPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/modifier-groups/${modifierGroupId}`,
      menuModifierGroupPatchEntity,options
    );
  }

/**
 * This endpoint allows for the dispatch of a specific delivery to begin the delivery process. The deliveryId parameter identifies the delivery to be dispatched, and this operation will update its status and initiate the delivery process.
 * @summary Dispatch Delivery
 */
const postV1AccountsAccountIdDeliveriesDeliveryIdDispatch = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    accountId: string,
    deliveryId: string,
    deliveryEntity: DeliveryEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/deliveries/${deliveryId}/dispatch`,
      deliveryEntity,options
    );
  }

/**
 * This endpoint allows for rearranging the items, categories, modifiers and modifier groups within a specific menu associated with a location. Administrators can define the new order of items, categories, modifiers and modifier groups ensuring that the menu is structured and displayed according to their preferences.
 * @summary Rearrange Menu Items, Categories, Modifiers, and Modifier Groups
 */
const patchV1AccountsAccountIdLocationsLocationIdMenusMenuIdRearrange = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string,
    menuId: string,
    menuRearrangeRequest: MenuRearrangeRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/rearrange`,
      menuRearrangeRequest,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific order associated with a reseller, identified by the orderId parameter. It returns comprehensive data about the order, including items, pricing, and status. This is useful for viewing or managing specific order details within a reseller's purview.
 * @summary Get Reseller Order
 */
const getV1ResellersResellerIdOrdersOrderId = <TData = AxiosResponse<GetOrderByIdResponse>>(
    resellerId: string,
    orderId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/orders/${orderId}`,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific delivery associated with an order under a reseller, identified by the deliveryId parameter. It returns comprehensive data about the delivery, including pickup time, status, and other relevant details.
 * @summary Get Order Delivery
 */
const getV1ResellersResellerIdOrdersOrderIdDeliveriesDeliveryId = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    resellerId: string,
    orderId: string,
    deliveryId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/orders/${orderId}/deliveries/${deliveryId}`,options
    );
  }

/**
 * This endpoint allows for uploading an image for a specific item within a menu at a location. The image can be used to enhance the visual appeal of the menu item, making it more attractive to customers. Administrators can manage this resource to ensure it meets the platform's standards.
 * @summary Upload Image
 */
const postV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemIdImage = <TData = AxiosResponse<SignedUrlResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    itemId: string,
    signedUrlRequest: SignedUrlRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/items/${itemId}/image`,
      signedUrlRequest,options
    );
  }

/**
 * This endpoint allows for the deletion of an image associated with a specific item within a menu at a location. Once deleted, the image will no longer be displayed for the menu item, and administrators will need to upload a new image if necessary.
 * @summary Delete Image
 */
const deleteV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemIdImage = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string,
    menuId: string,
    itemId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/items/${itemId}/image`,options
    );
  }

/**
 * This endpoint retrieves a list of all modifier groups within a catalog associated with a specific location under an account. The data includes modifier group identifiers, names, and other relevant details, providing an overview of the modifier groups available in the catalog. This information is essential for managing the catalog's customization options and enhancing the customer experience.
 * @summary Get Modifier Groups
 */
const getV1AccountsAccountIdLocationsLocationIdCatalogModifierGroups = <TData = AxiosResponse<ListAccountCatalogModifierGroupsResponse>>(
    accountId: string,
    locationId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdCatalogModifierGroupsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/modifier-groups`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new modifier group within a catalog at a specific location. Users can define the modifier group's details, including its name and associated modifiers. Once created, the modifier group will be available for use in organizing and managing modifiers within the catalog, enhancing the catalog's structure and offerings.
 * @summary Create Modifier Group
 */
const postV1AccountsAccountIdLocationsLocationIdCatalogModifierGroups = <TData = AxiosResponse<ListAccountCatalogModifierGroupByIdResponse>>(
    accountId: string,
    locationId: string,
    catalogModifierGroupCreateEntity: CatalogModifierGroupCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/modifier-groups`,
      catalogModifierGroupCreateEntity,options
    );
  }

/**
 * This endpoint retrieves a list of all locations associated with a specific account. The data returned includes location identifiers, names, and other relevant details, providing a comprehensive overview of the locations that the account manages or monitors.
 * @summary List Locations
 */
const getV1AccountsAccountIdLocations = <TData = AxiosResponse<ListLocationsResponse>>(
    accountId: string,
    params?: GetV1AccountsAccountIdLocationsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new location under a specific account. Administrators can define the location's details, such as its name, address, and operational hours. Once created, the location will be linked to the account and managed accordingly within the platform.
 * @summary Create Location
 */
const postV1AccountsAccountIdLocations = <TData = AxiosResponse<GetLocationByIdResponse>>(
    accountId: string,
    locationCreateEntity: LocationCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/locations`,
      locationCreateEntity,options
    );
  }

/**
 * This endpoint allows users to export the entire catalog associated with a specific location under an account. The export includes all categories, products, modifiers, and other relevant details, providing a comprehensive dataset that can be used for backup, analysis, or migration purposes.
 * @summary Export Catalog
 */
const getV1AccountsAccountIdLocationsLocationIdCatalogExport = <TData = AxiosResponse<GetAccountCatalogExportResponse>>(
    accountId: string,
    locationId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/export`,options
    );
  }

/**
 * This endpoint allows for the dispatch of a specific delivery associated with an order under a reseller. The deliveryId parameter identifies the delivery to be dispatched. This operation will update the delivery status and initiate the delivery process.
 * @summary Dispatch Order Delivery
 */
const postV1ResellersResellerIdOrdersOrderIdDeliveriesDeliveryIdDispatch = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    resellerId: string,
    orderId: string,
    deliveryId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/resellers/${resellerId}/orders/${orderId}/deliveries/${deliveryId}/dispatch`,undefined,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific connection associated with a location, identified by the connectionId parameter. It provides comprehensive data about the connection, including its configuration, status, and associated services, allowing for effective management and troubleshooting.
 * @summary Get Location Connection Details
 */
const getV1AccountsAccountIdLocationsLocationIdConnectionsConnectionId = <TData = AxiosResponse<GetConnectionByIdResponse>>(
    accountId: string,
    locationId: string,
    connectionId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/connections/${connectionId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific connection associated with a location. Users can modify the connection's details, such as its configuration, status, or services, ensuring that the connection remains current and aligned with the location's requirements.
 * @summary Update Location Connection
 */
const patchV1AccountsAccountIdLocationsLocationIdConnectionsConnectionId = <TData = AxiosResponse<GetConnectionByIdResponse>>(
    accountId: string,
    locationId: string,
    connectionId: string,
    connectionPatchEntity: ConnectionPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/locations/${locationId}/connections/${connectionId}`,
      connectionPatchEntity,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific category within a catalog at a location, identified by the categoryId parameter. It provides comprehensive data about the category, including its products, description, and status, allowing for effective management and updates.
 * @summary Get Catalog Category
 */
const getV1AccountsAccountIdLocationsLocationIdCatalogCategoriesCategoryId = <TData = AxiosResponse<GetAccountCatalogCategoryByIdResponse>>(
    accountId: string,
    locationId: string,
    categoryId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/categories/${categoryId}`,options
    );
  }

/**
 * This endpoint allows for the deletion of a specific category within a catalog at a location. The categoryId parameter identifies the category to be deleted, which will remove it from the system and disassociate it from the catalog.
 * @summary Delete Catalog Category
 */
const deleteV1AccountsAccountIdLocationsLocationIdCatalogCategoriesCategoryId = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string,
    categoryId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/categories/${categoryId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific category within a catalog at a location. Users can modify the category's details, such as its name, description, or associated products, ensuring that the category remains current and aligned with the catalog's structure and offerings.
 * @summary Update Catalog Category
 */
const patchV1AccountsAccountIdLocationsLocationIdCatalogCategoriesCategoryId = <TData = AxiosResponse<GetAccountCatalogCategoryByIdResponse>>(
    accountId: string,
    locationId: string,
    categoryId: string,
    catalogCategoryPatchEntity: CatalogCategoryPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/categories/${categoryId}`,
      catalogCategoryPatchEntity,options
    );
  }

/**
 * This endpoint allows the exchange of an authorization code for an access token as part of the OAuth2 flow. The access token can then be used to authenticate and make authorized API requests on behalf of the user. The endpoint also supports other OAuth2 grant types such as refresh tokens.
 * @summary Token
 */
const postOauth2Token = <TData = AxiosResponse<TokenResponse>>(
    tokenRequest: TokenRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/oauth2/token`,
      tokenRequest,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific item within a menu at a location, identified by the itemId parameter. It provides comprehensive data about the item, including its description, pricing, and availability, allowing for effective management and updates.
 * @summary Get Item
 */
const getV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemId = <TData = AxiosResponse<ListAccountMenuItemByIdResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    itemId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/items/${itemId}`,options
    );
  }

/**
 * This endpoint allows for the deletion of a specific item within a menu at a location. The itemId parameter identifies the item to be deleted, which will remove it from the system and disassociate it from the menu.
 * @summary Delete Item
 */
const deleteV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemId = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string,
    menuId: string,
    itemId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/items/${itemId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific item within a menu at a location. Administrators can modify various aspects of the item, such as its description, pricing, or availability, ensuring that the item remains current and aligned with the menu's offerings.
 * @summary Update Item
 */
const patchV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemId = <TData = AxiosResponse<ListAccountMenuItemByIdResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    itemId: string,
    menuItemPatchEntity: MenuItemPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/items/${itemId}`,
      menuItemPatchEntity,options
    );
  }

/**
 * This endpoint retrieves a list of all orders associated with a specific location under an account. The data returned includes order identifiers, statuses, and other relevant details, providing a comprehensive overview of all orders managed by the location. Users can use this information to monitor order processing and fulfillment.
 * @summary List Orders
 */
const getV1AccountsAccountIdLocationsLocationIdOrders = <TData = AxiosResponse<ListOrdersResponse>>(
    accountId: string,
    locationId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdOrdersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/orders`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new order under a specific location associated with an account. Applications or users can define the order's details, including the items ordered, delivery instructions, and payment information. Once created, the order will be processed and fulfilled according to the location's capabilities.
 * @summary Create Order
 */
const postV1AccountsAccountIdLocationsLocationIdOrders = <TData = AxiosResponse<GetOrderByIdResponse>>(
    accountId: string,
    locationId: string,
    orderCreateEntity: OrderCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/locations/${locationId}/orders`,
      orderCreateEntity,options
    );
  }

/**
 * This endpoint allows for uploading an image for a specific product within a catalog at a location. The image can be used to enhance the visual appeal of the product, making it more attractive to customers. Users can manage this resource to ensure it meets the platform's standards and accurately represents the product.
 * @summary Upload Product Image
 */
const postV1AccountsAccountIdLocationsLocationIdCatalogProductsProductIdImage = <TData = AxiosResponse<SignedUrlResponse>>(
    accountId: string,
    locationId: string,
    productId: string,
    signedUrlRequest: SignedUrlRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/products/${productId}/image`,
      signedUrlRequest,options
    );
  }

/**
 * This endpoint allows for the deletion of an image associated with a specific product within a catalog at a location. Once deleted, the image will no longer be displayed for the product, and Users will need to upload a new image if necessary.
 * @summary Delete Product Image
 */
const deleteV1AccountsAccountIdLocationsLocationIdCatalogProductsProductIdImage = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string,
    productId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/products/${productId}/image`,options
    );
  }

/**
 * This endpoint retrieves a list of all deliveries associated with a specific reseller. The data returned includes delivery identifiers, statuses, and other relevant details, providing a comprehensive overview of all deliveries managed by the reseller.
 * @summary List Deliveries
 */
const getV1ResellersResellerIdDeliveries = <TData = AxiosResponse<ListDeliveriesResponse>>(
    resellerId: string,
    params?: GetV1ResellersResellerIdDeliveriesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/deliveries`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new delivery under a specific reseller. Administrators can define the delivery details, such as the pickup time, status, and other attributes. Once created, the delivery will be associated with the reseller and managed accordingly.
 * @summary Create Delivery
 */
const postV1ResellersResellerIdDeliveries = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    resellerId: string,
    resellerDeliveryCreateEntity: ResellerDeliveryCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/resellers/${resellerId}/deliveries`,
      resellerDeliveryCreateEntity,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific location associated with an account, identified by the locationId parameter. It provides comprehensive data about the location, such as its address, operational status, and any other relevant details needed for management.
 * @summary Get Location
 */
const getV1AccountsAccountIdLocationsLocationId = <TData = AxiosResponse<GetLocationByIdResponse>>(
    accountId: string,
    locationId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}`,options
    );
  }

/**
 * This endpoint allows for the deletion of a specific location associated with an account. The locationId parameter identifies the location to be deleted, which will remove it from the system and disassociate it from the account.
 * @summary Delete Location
 */
const deleteV1AccountsAccountIdLocationsLocationId = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/accounts/${accountId}/locations/${locationId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific location under an account. Administrators can modify the location's details, such as its address, hours of operation, or other attributes, ensuring that the information remains current and accurate for effective management.
 * @summary Update Location
 */
const patchV1AccountsAccountIdLocationsLocationId = <TData = AxiosResponse<GetLocationByIdResponse>>(
    accountId: string,
    locationId: string,
    locationPatchEntity: LocationPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/locations/${locationId}`,
      locationPatchEntity,options
    );
  }

/**
 * This endpoint retrieves a list of all orders associated with a specific location under an account. The data returned includes order identifiers, statuses, and other relevant details, providing a comprehensive overview of all orders managed by the location.
 * @summary List Orders
 */
const getV1ResellersResellerIdAccountsAccountIdLocationsLocationIdOrders = <TData = AxiosResponse<ListOrdersResponse>>(
    resellerId: string,
    accountId: string,
    locationId: string,
    params?: GetV1ResellersResellerIdAccountsAccountIdLocationsLocationIdOrdersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/accounts/${accountId}/locations/${locationId}/orders`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint lists all applications associated with a specific location under an account. The data includes application identifiers, names, and other relevant details, allowing administrators to manage and monitor applications linked to that location.
 * @summary List Applications
 */
const getV1AccountsAccountIdLocationsLocationIdApplications = <TData = AxiosResponse<ListApplicationsResponse>>(
    accountId: string,
    locationId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdApplicationsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/applications`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint retrieves a list of all categories within a catalog associated with a specific location under an account. The data includes category identifiers, names, and descriptions, providing an overview of the categories available in the catalog. Users can use this information to manage and organize products within the catalog.
 * @summary Get Catalog Categories
 */
const getV1AccountsAccountIdLocationsLocationIdCatalogCategories = <TData = AxiosResponse<ListCatalogCategoriesResponse>>(
    accountId: string,
    locationId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdCatalogCategoriesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/categories`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new category within a catalog at a specific location. Users can define the category's details, including its name, description, and associated products. Once created, the category will be available for organizing products within the catalog, enhancing the catalog's structure and usability.
 * @summary Create Catalog Category
 */
const postV1AccountsAccountIdLocationsLocationIdCatalogCategories = <TData = AxiosResponse<GetAccountCatalogCategoryByIdResponse>>(
    accountId: string,
    locationId: string,
    catalogCategoryCreateEntity: CatalogCategoryCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/categories`,
      catalogCategoryCreateEntity,options
    );
  }

/**
 * This endpoint allows users to import a catalog dataset into a specific location under an account. The import process can include categories, products, modifiers, and other relevant details, allowing for efficient setup, migration, or restoration of the catalog.
 * @summary Import Catalog
 */
const putV1AccountsAccountIdLocationsLocationIdCatalogImport = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string,
    catalogImportEntity: CatalogImportEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/import`,
      catalogImportEntity,options
    );
  }

/**
 * This endpoint retrieves metrics and performance data for a specific account. It allows account owners to monitor the account's usage, effectiveness, and other key performance indicators, providing insights that can inform decisions about resource allocation and account management.
 * @summary Get Metrics
 */
const getV1AccountsAccountIdMetrics = <TData = AxiosResponse<unknown>>(
    accountId: string,
    params?: GetV1AccountsAccountIdMetricsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/metrics`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint retrieves detailed information about a specific order associated with a location, identified by the orderId parameter. It provides comprehensive data about the order, including its status, items, and delivery information, allowing for effective tracking and management of the order.
 * @summary Get Order
 */
const getV1AccountsAccountIdLocationsLocationIdOrdersOrderId = <TData = AxiosResponse<GetOrderByIdResponse>>(
    accountId: string,
    locationId: string,
    orderId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/orders/${orderId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific order under a location. Users can modify details such as the order's status, delivery instructions, or items, ensuring that the order remains accurate and aligned with the customer's needs.
 * @summary Update Order
 */
const patchV1AccountsAccountIdLocationsLocationIdOrdersOrderId = <TData = AxiosResponse<GetOrderByIdResponse>>(
    accountId: string,
    locationId: string,
    orderId: string,
    orderPatchEntity: OrderPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/locations/${locationId}/orders/${orderId}`,
      orderPatchEntity,options
    );
  }

const getV1ResellersResellerIdAccountsAccountIdLocationsLocationIdApplications = <TData = AxiosResponse<ListApplicationsResponse>>(
    resellerId: string,
    accountId: string,
    locationId: string,
    params?: GetV1ResellersResellerIdAccountsAccountIdLocationsLocationIdApplicationsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/accounts/${accountId}/locations/${locationId}/applications`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint lists all locations that are associated with a specific account under a reseller. The data returned includes location identifiers, names, and other relevant details, providing a comprehensive overview of all locations associated with the account.
 * @summary List Locations
 */
const getV1ResellersResellerIdAccountsAccountIdLocations = <TData = AxiosResponse<ListLocationsResponse>>(
    resellerId: string,
    accountId: string,
    params?: GetV1ResellersResellerIdAccountsAccountIdLocationsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/accounts/${accountId}/locations`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new location under a specific account associated with a reseller. Administrators can define the location's details, such as its name, address, and operational hours. Once created, the location will be linked to the account and managed accordingly.
 * @summary Create Location
 */
const postV1ResellersResellerIdAccountsAccountIdLocations = <TData = AxiosResponse<GetLocationByIdResponse>>(
    resellerId: string,
    accountId: string,
    locationCreateEntity: LocationCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/resellers/${resellerId}/accounts/${accountId}/locations`,
      locationCreateEntity,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific menu associated with a location, identified by the menuId parameter. It provides comprehensive data about the menu, including its items, categories, and status, allowing for effective management and updates.
 * @summary Get Menu
 */
const getV1AccountsAccountIdLocationsLocationIdMenusMenuId = <TData = AxiosResponse<GetAccountMenuByIdResponse>>(
    accountId: string,
    locationId: string,
    menuId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}`,options
    );
  }

/**
 * This endpoint allows for the deletion of a specific menu associated with a location. The menuId parameter identifies the menu to be deleted, which will remove it from the system and disassociate it from the location.
 * @summary Delete Menu
 */
const deleteV1AccountsAccountIdLocationsLocationIdMenusMenuId = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string,
    menuId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific menu associated with a location. Administrators can modify various aspects of the menu, such as its items, categories, or availability, ensuring that the menu remains current and aligned with the location's offerings.
 * @summary Update Menu
 */
const patchV1AccountsAccountIdLocationsLocationIdMenusMenuId = <TData = AxiosResponse<GetAccountMenuByIdResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    menuPatchEntity: MenuPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}`,
      menuPatchEntity,options
    );
  }

/**
 * This endpoint retrieves audit logs for a specific location associated with an account. The logs provide detailed records of actions and changes made at the location, allowing administrators to review and analyze activity for compliance and security purposes.
 * @summary Get Audits
 */
const getV1AccountsAccountIdLocationsLocationIdAudits = <TData = AxiosResponse<ListAuditsResponse>>(
    accountId: string,
    locationId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdAuditsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/audits`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the cancellation of a specific delivery associated with an order under a reseller. The deliveryId parameter identifies the delivery to be canceled. This operation will update the delivery status and make it unavailable for further processing.
 * @summary Cancel Order Delivery
 */
const postV1ResellersResellerIdDeliveriesDeliveryIdCancel = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    resellerId: string,
    deliveryId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/resellers/${resellerId}/deliveries/${deliveryId}/cancel`,undefined,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific modifier within a catalog at a location, identified by the modifierId parameter. It provides comprehensive data about the modifier, including its description, pricing, and availability, allowing for effective management and updates.
 * @summary Get Catalog Modifier
 */
const getV1AccountsAccountIdLocationsLocationIdCatalogModifiersModifierId = <TData = AxiosResponse<GetAccountCatalogModifierByIdResponse>>(
    accountId: string,
    locationId: string,
    modifierId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/modifiers/${modifierId}`,options
    );
  }

/**
 * This endpoint allows for the deletion of a specific modifier within a catalog at a location. The modifierId parameter identifies the modifier to be deleted, which will remove it from the system and disassociate it from the catalog.
 * @summary Delete Catalog Modifier
 */
const deleteV1AccountsAccountIdLocationsLocationIdCatalogModifiersModifierId = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string,
    modifierId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/modifiers/${modifierId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific modifier within a catalog at a location. Users can modify the modifier's details, such as its description, pricing, or availability, ensuring that the modifier remains current and aligned with the catalog's customization options.
 * @summary Update Catalog Modifier
 */
const patchV1AccountsAccountIdLocationsLocationIdCatalogModifiersModifierId = <TData = AxiosResponse<GetAccountCatalogModifierByIdResponse>>(
    accountId: string,
    locationId: string,
    modifierId: string,
    catalogModifierPatchEntity: CatalogModifierPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/modifiers/${modifierId}`,
      catalogModifierPatchEntity,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific category within a menu at a location, identified by the categoryId parameter. It provides comprehensive data about the category, including its items and status, allowing for effective management and updates.
 * @summary Get Category
 */
const getV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategoriesCategoryId = <TData = AxiosResponse<GetAccountMenuCategoryByIdResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    categoryId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/categories/${categoryId}`,options
    );
  }

/**
 * This endpoint allows for the deletion of a specific category within a menu at a location. The categoryId parameter identifies the category to be deleted, which will remove it from the system and disassociate it from the menu.
 * @summary Delete Category
 */
const deleteV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategoriesCategoryId = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string,
    menuId: string,
    categoryId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/categories/${categoryId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific category within a menu at a location. Administrators can modify various aspects of the category, such as its name, items, or availability, ensuring that the category remains current and aligned with the menu's offerings.
 * @summary Update Category
 */
const patchV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategoriesCategoryId = <TData = AxiosResponse<GetAccountMenuCategoryByIdResponse>>(
    accountId: string,
    locationId: string,
    menuId: string,
    categoryId: string,
    menuCategoryPatchEntity: MenuCategoryPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/locations/${locationId}/menus/${menuId}/categories/${categoryId}`,
      menuCategoryPatchEntity,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific order associated with an account, identified by the orderId parameter. It provides comprehensive data about the order, including items, status, and other relevant details, making it useful for managing individual orders.
 * @summary Get Order
 */
const getV1AccountsAccountIdOrdersOrderId = <TData = AxiosResponse<GetOrderByIdResponse>>(
    accountId: string,
    orderId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/orders/${orderId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific order associated with an account. Users can modify various aspects of the order, such as  status, or other attributes, ensuring that the order remains current and accurate.
 * @summary Update Order
 */
const patchV1AccountsAccountIdOrdersOrderId = <TData = AxiosResponse<GetOrderByIdResponse>>(
    accountId: string,
    orderId: string,
    orderPatchEntity: OrderPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/accounts/${accountId}/orders/${orderId}`,
      orderPatchEntity,options
    );
  }

/**
 * This endpoint retrieves detailed information about a specific account associated with a reseller, identified by the accountId parameter. It provides comprehensive data about the account, including contact details, status, and other relevant information. This is useful for managing a specific account's details.
 * @summary Get Account
 */
const getV1ResellersResellerIdAccountsAccountId = <TData = AxiosResponse<GetAccountByIdResponse>>(
    resellerId: string,
    accountId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/accounts/${accountId}`,options
    );
  }

/**
 * This endpoint allows for updating the information of a specific account under a reseller, identified by the accountId parameter. Administrators can modify various aspects of the account, such as its contact information, status, or other relevant details.
 * @summary Update Account
 */
const patchV1ResellersResellerIdAccountsAccountId = <TData = AxiosResponse<GetAccountByIdResponse>>(
    resellerId: string,
    accountId: string,
    resellerAccountPatchEntity: ResellerAccountPatchEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/v1/resellers/${resellerId}/accounts/${accountId}`,
      resellerAccountPatchEntity,options
    );
  }

/**
 * This endpoint retrieves a list of all connections associated with a specific location under an account. The data returned includes connection identifiers, types, and statuses, providing a comprehensive overview of the external systems and services linked to the location. Users can use this information to manage and monitor connections, ensuring they remain active and properly configured.
 * @summary Get Location Connections
 */
const getV1AccountsAccountIdLocationsLocationIdConnections = <TData = AxiosResponse<ListConnectionsResponse>>(
    accountId: string,
    locationId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdConnectionsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/connections`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint retrieves a list of all audits associated with a specific reseller. The data includes audit identifiers, actions, and other relevant details, providing a comprehensive overview of the audits managed by the reseller.
 * @summary Get Audits related to a given reseller
 */
const getV1ResellersResellerIdAudits = <TData = AxiosResponse<ListAuditsResponse>>(
    resellerId: string,
    params?: GetV1ResellersResellerIdAuditsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/audits`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the deletion of a specific application connected to a location under an account. The applicationId parameter identifies the application to be deleted, which will remove it from the system and disassociate it from the location.
 * @summary Delete Application
 */
const deleteV1AccountsAccountIdLocationsLocationIdApplicationsApplicationId = <TData = AxiosResponse<unknown>>(
    accountId: string,
    locationId: string,
    applicationId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/accounts/${accountId}/locations/${locationId}/applications/${applicationId}`,options
    );
  }

/**
 * This endpoint allows for the dispatch of a specific quote to begin the delivery process. The deliveryId parameter identifies the delivery to be dispatched. This operation will update the delivery status and initiate the delivery process.
 * @summary Dispatch Delivery Quote
 */
const postV1ResellersResellerIdDeliveriesDeliveryIdDispatch = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    resellerId: string,
    deliveryId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/resellers/${resellerId}/deliveries/${deliveryId}/dispatch`,undefined,options
    );
  }

/**
 * This endpoint retrieves a list of all orders associated with a specific account. The data returned includes order identifiers, statuses, and other relevant details, providing a comprehensive overview of all orders managed by the account.
 * @summary List Orders
 */
const getV1AccountsAccountIdOrders = <TData = AxiosResponse<ListOrdersResponse>>(
    accountId: string,
    params?: GetV1AccountsAccountIdOrdersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/orders`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the refresh of a specific delivery associated with an account. The deliveryId parameter identifies the delivery to be refreshed, and this operation will update its status and make it available for further processing.
 * @summary Refresh Delivery
 */
const postV1AccountsAccountIdDeliveriesDeliveryIdRefresh = <TData = AxiosResponse<unknown>>(
    accountId: string,
    deliveryId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/deliveries/${deliveryId}/refresh`,undefined,options
    );
  }

/**
 * This endpoint retrieves a list of all users associated with a specific reseller. The data returned includes user identifiers, names, and other relevant details, allowing administrators to manage and monitor the user base effectively.
 * @summary List Users
 */
const getV1ResellersResellerIdUsers = <TData = AxiosResponse<ListUsersResponse>>(
    resellerId: string,
    params?: GetV1ResellersResellerIdUsersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new user under a specific reseller. Administrators can define the user's details, such as their name, email, and role. Once created, the user will be associated with the reseller and have access to the appropriate resources.
 * @summary Create User
 */
const postV1ResellersResellerIdUsers = <TData = AxiosResponse<GetUserByIdResponse>>(
    resellerId: string,
    userCreateEntity: UserCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/resellers/${resellerId}/users`,
      userCreateEntity,options
    );
  }

const postV1AccountsAccountIdDeliveriesDeliveryIdDispatchDispatchedIdCancel = <TData = AxiosResponse<unknown>>(
    accountId: string,
    deliveryId: string,
    dispatchedId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/deliveries/${deliveryId}/dispatch/${dispatchedId}/cancel`,undefined,options
    );
  }

/**
 * This endpoint retrieves a list of all deliveries associated with a specific order under a location. The data returned includes delivery identifiers, statuses, and other relevant details, providing a comprehensive overview of all deliveries linked to the order. Users can use this information to track delivery progress and status.
 * @summary List Deliveries
 */
const getV1AccountsAccountIdLocationsLocationIdOrdersOrderIdDeliveries = <TData = AxiosResponse<ListDeliveriesResponse>>(
    accountId: string,
    locationId: string,
    orderId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdOrdersOrderIdDeliveriesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/orders/${orderId}/deliveries`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows for the creation of a new delivery associated with a specific order under a location. Users can define the delivery's details, such as the driver, status, and location, ensuring that the delivery is accurately linked to the order and can be fulfilled accordingly.
 * @summary Create Delivery
 */
const postV1AccountsAccountIdLocationsLocationIdOrdersOrderIdDeliveries = <TData = AxiosResponse<GetDeliveryByIdResponse>>(
    accountId: string,
    locationId: string,
    orderId: string,
    deliveryCreateEntity: DeliveryCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/locations/${locationId}/orders/${orderId}/deliveries`,
      deliveryCreateEntity,options
    );
  }

/**
 * @summary Get Reseller Account Metrics
 */
const getV1ResellersResellerIdAccountsAccountIdMetrics = <TData = AxiosResponse<unknown>>(
    resellerId: string,
    accountId: string,
    params?: GetV1ResellersResellerIdAccountsAccountIdMetricsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/resellers/${resellerId}/accounts/${accountId}/metrics`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint triggers a menu publish to a specific connection associated with an account. The publish process ensures that the latest menu data is sent to the connected system or service, keeping it up-to-date with the account's offerings. Proper authorization is required to perform this action, and it is typically used by users to synchronize data across systems.
 * @summary Publish to Connection
 */
const postV1AccountsAccountIdConnectionsConnectionIdPublish = <TData = AxiosResponse<unknown>>(
    accountId: string,
    connectionId: string,
    menuPublishCreateEntity: MenuPublishCreateEntity, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/accounts/${accountId}/connections/${connectionId}/publish`,
      menuPublishCreateEntity,options
    );
  }

/**
 * This endpoint retrieves a list of all variants associated with a specific product in a catalog at a location. The data includes variant identifiers, names, and other relevant details, providing an overview of the variants available for the product within the specified catalog. Users can use this information to manage the product's variations effectively.
 * @summary Get Product Variants
 */
const getV1AccountsAccountIdLocationsLocationIdCatalogProductsProductIdVariants = <TData = AxiosResponse<GetAccountProductVariantsResponse>>(
    accountId: string,
    locationId: string,
    productId: string,
    params?: GetV1AccountsAccountIdLocationsLocationIdCatalogProductsProductIdVariantsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/accounts/${accountId}/locations/${locationId}/catalog/products/${productId}/variants`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

return {getV1ResellersResellerIdLocations,postV1ResellersResellerIdLocations,getV1ResellersResellerIdUsersUserId,patchV1ResellersResellerIdUsersUserId,getV1AccountsAccountIdConnections,getV1ResellersResellerIdOrdersOrderIdAudits,getV1ResellersResellerIdMetrics,getV1ResellersResellerIdOrdersOrderIdDeliveries,getV1ResellersResellerIdDeliveriesDeliveryId,getV1AccountsAccountIdLocationsLocationIdMenusMenuIdExport,getOauth2Authorize,getV1AccountsAccountIdLocationsLocationIdDeliveriesDeliveryId,getV1AccountsAccountIdLocationsLocationIdMenus,postV1AccountsAccountIdLocationsLocationIdMenus,getV1ResellersResellerId,patchV1ResellersResellerId,getV1AccountsAccountIdLocationsLocationIdOrdersOrderIdDeliveriesDeliveryId,patchV1AccountsAccountIdLocationsLocationIdOrdersOrderIdDeliveriesDeliveryId,getV1AccountsAccountIdLocationsLocationIdCatalogModifierGroupsModifierGroupId,deleteV1AccountsAccountIdLocationsLocationIdCatalogModifierGroupsModifierGroupId,patchV1AccountsAccountIdLocationsLocationIdCatalogModifierGroupsModifierGroupId,getV1AccountsAccountIdLocationsLocationIdCatalogProducts,postV1AccountsAccountIdLocationsLocationIdCatalogProducts,getV1UsersUserIdApplicationsApplicationIdAudits,getV1ApplicationsApplicationId,postV1ResellersResellerIdDeliveriesDeliveryIdDispatchDispatchIdCancel,postV1AccountsAccountIdLocationsLocationIdConnectionsConnectionIdPull,getV1AccountsAccountIdDeliveriesDeliveryId,patchV1AccountsAccountIdDeliveriesDeliveryId,getV1ResellersResellerIdAccounts,postV1ResellersResellerIdAccounts,getV1AccountsAccountIdLocationsLocationIdMetrics,getV1Accounts,postV1Accounts,getV1ResellersResellerIdOrders,getV1Resellers,getV1AccountsAccountIdLocationsLocationIdDeliveriesDeliveryIdDispatchDispatchId,patchV1AccountsAccountIdLocationsLocationIdDeliveriesDeliveryIdDispatchDispatchId,getV1AccountsAccountIdLocationsLocationIdMenusMenuIdItems,postV1AccountsAccountIdLocationsLocationIdMenusMenuIdItems,postV1ResellersResellerIdOrdersOrderIdDeliveriesDeliveryIdRefresh,getV1AccountsAccountIdLocationsLocationIdOrdersOrderIdAudits,getV1UsersUserIdApplications,postV1UsersUserIdApplications,getV1UsersUserIdApplicationsApplicationIdMetrics,postV1UsersUserIdApplicationsApplicationIdImage,deleteV1UsersUserIdApplicationsApplicationIdImage,getV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiers,postV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiers,getV1AccountsAccountIdLocationsLocationIdCatalogProductsProductId,deleteV1AccountsAccountIdLocationsLocationIdCatalogProductsProductId,patchV1AccountsAccountIdLocationsLocationIdCatalogProductsProductId,getV1UsersUserIdApplicationsApplicationId,deleteV1UsersUserIdApplicationsApplicationId,patchV1UsersUserIdApplicationsApplicationId,getV1AccountsAccountIdConnectionsConnectionId,postV1ResellersResellerIdDeliveriesDeliveryIdRefresh,getV1AccountsAccountIdDeliveries,postV1AccountsAccountIdDeliveries,getV1Applications,getV1UsersUserId,patchV1UsersUserId,getV1AccountsAccountIdLocationsLocationIdDeliveries,getV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroups,postV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroups,postV1AccountsAccountIdDeliveriesDeliveryIdCancel,getV1ResellersResellerIdLocationsLocationId,deleteV1ResellersResellerIdLocationsLocationId,patchV1ResellersResellerIdLocationsLocationId,getV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiersModifierId,deleteV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiersModifierId,patchV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiersModifierId,getV1AccountsAccountId,patchV1AccountsAccountId,getV1AccountsAccountIdOrdersOrderIdAudits,getV1AccountsAccountIdLocationsLocationIdCatalogModifiers,postV1AccountsAccountIdLocationsLocationIdCatalogModifiers,getV1ResellersResellerIdAccountsAccountIdLocationsLocationId,deleteV1ResellersResellerIdAccountsAccountIdLocationsLocationId,patchV1ResellersResellerIdAccountsAccountIdLocationsLocationId,getV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategories,postV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategories,getV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemIdVariants,getV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroupsModifierGroupId,deleteV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroupsModifierGroupId,patchV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroupsModifierGroupId,postV1AccountsAccountIdDeliveriesDeliveryIdDispatch,patchV1AccountsAccountIdLocationsLocationIdMenusMenuIdRearrange,getV1ResellersResellerIdOrdersOrderId,getV1ResellersResellerIdOrdersOrderIdDeliveriesDeliveryId,postV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemIdImage,deleteV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemIdImage,getV1AccountsAccountIdLocationsLocationIdCatalogModifierGroups,postV1AccountsAccountIdLocationsLocationIdCatalogModifierGroups,getV1AccountsAccountIdLocations,postV1AccountsAccountIdLocations,getV1AccountsAccountIdLocationsLocationIdCatalogExport,postV1ResellersResellerIdOrdersOrderIdDeliveriesDeliveryIdDispatch,getV1AccountsAccountIdLocationsLocationIdConnectionsConnectionId,patchV1AccountsAccountIdLocationsLocationIdConnectionsConnectionId,getV1AccountsAccountIdLocationsLocationIdCatalogCategoriesCategoryId,deleteV1AccountsAccountIdLocationsLocationIdCatalogCategoriesCategoryId,patchV1AccountsAccountIdLocationsLocationIdCatalogCategoriesCategoryId,postOauth2Token,getV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemId,deleteV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemId,patchV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemId,getV1AccountsAccountIdLocationsLocationIdOrders,postV1AccountsAccountIdLocationsLocationIdOrders,postV1AccountsAccountIdLocationsLocationIdCatalogProductsProductIdImage,deleteV1AccountsAccountIdLocationsLocationIdCatalogProductsProductIdImage,getV1ResellersResellerIdDeliveries,postV1ResellersResellerIdDeliveries,getV1AccountsAccountIdLocationsLocationId,deleteV1AccountsAccountIdLocationsLocationId,patchV1AccountsAccountIdLocationsLocationId,getV1ResellersResellerIdAccountsAccountIdLocationsLocationIdOrders,getV1AccountsAccountIdLocationsLocationIdApplications,getV1AccountsAccountIdLocationsLocationIdCatalogCategories,postV1AccountsAccountIdLocationsLocationIdCatalogCategories,putV1AccountsAccountIdLocationsLocationIdCatalogImport,getV1AccountsAccountIdMetrics,getV1AccountsAccountIdLocationsLocationIdOrdersOrderId,patchV1AccountsAccountIdLocationsLocationIdOrdersOrderId,getV1ResellersResellerIdAccountsAccountIdLocationsLocationIdApplications,getV1ResellersResellerIdAccountsAccountIdLocations,postV1ResellersResellerIdAccountsAccountIdLocations,getV1AccountsAccountIdLocationsLocationIdMenusMenuId,deleteV1AccountsAccountIdLocationsLocationIdMenusMenuId,patchV1AccountsAccountIdLocationsLocationIdMenusMenuId,getV1AccountsAccountIdLocationsLocationIdAudits,postV1ResellersResellerIdDeliveriesDeliveryIdCancel,getV1AccountsAccountIdLocationsLocationIdCatalogModifiersModifierId,deleteV1AccountsAccountIdLocationsLocationIdCatalogModifiersModifierId,patchV1AccountsAccountIdLocationsLocationIdCatalogModifiersModifierId,getV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategoriesCategoryId,deleteV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategoriesCategoryId,patchV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategoriesCategoryId,getV1AccountsAccountIdOrdersOrderId,patchV1AccountsAccountIdOrdersOrderId,getV1ResellersResellerIdAccountsAccountId,patchV1ResellersResellerIdAccountsAccountId,getV1AccountsAccountIdLocationsLocationIdConnections,getV1ResellersResellerIdAudits,deleteV1AccountsAccountIdLocationsLocationIdApplicationsApplicationId,postV1ResellersResellerIdDeliveriesDeliveryIdDispatch,getV1AccountsAccountIdOrders,postV1AccountsAccountIdDeliveriesDeliveryIdRefresh,getV1ResellersResellerIdUsers,postV1ResellersResellerIdUsers,postV1AccountsAccountIdDeliveriesDeliveryIdDispatchDispatchedIdCancel,getV1AccountsAccountIdLocationsLocationIdOrdersOrderIdDeliveries,postV1AccountsAccountIdLocationsLocationIdOrdersOrderIdDeliveries,getV1ResellersResellerIdAccountsAccountIdMetrics,postV1AccountsAccountIdConnectionsConnectionIdPublish,getV1AccountsAccountIdLocationsLocationIdCatalogProductsProductIdVariants}};
export type GetV1ResellersResellerIdLocationsResult = AxiosResponse<ListLocationsResponse>
export type PostV1ResellersResellerIdLocationsResult = AxiosResponse<GetLocationByIdResponse>
export type GetV1ResellersResellerIdUsersUserIdResult = AxiosResponse<GetUserByIdResponse>
export type PatchV1ResellersResellerIdUsersUserIdResult = AxiosResponse<GetUserByIdResponse>
export type GetV1AccountsAccountIdConnectionsResult = AxiosResponse<ListConnectionsResponse>
export type GetV1ResellersResellerIdOrdersOrderIdAuditsResult = AxiosResponse<ListAuditsResponse>
export type GetV1ResellersResellerIdMetricsResult = AxiosResponse<unknown>
export type GetV1ResellersResellerIdOrdersOrderIdDeliveriesResult = AxiosResponse<ListDeliveriesResponse>
export type GetV1ResellersResellerIdDeliveriesDeliveryIdResult = AxiosResponse<GetDeliveryByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdExportResult = AxiosResponse<GetAccountMenuExportResponse>
export type GetOauth2AuthorizeResult = AxiosResponse<unknown>
export type GetV1AccountsAccountIdLocationsLocationIdDeliveriesDeliveryIdResult = AxiosResponse<GetDeliveryByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdMenusResult = AxiosResponse<ListAccountMenusResponse>
export type PostV1AccountsAccountIdLocationsLocationIdMenusResult = AxiosResponse<GetAccountMenuByIdResponse>
export type GetV1ResellersResellerIdResult = AxiosResponse<GetResellerByIdResponse>
export type PatchV1ResellersResellerIdResult = AxiosResponse<GetResellerByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdOrdersOrderIdDeliveriesDeliveryIdResult = AxiosResponse<GetDeliveryByIdResponse>
export type PatchV1AccountsAccountIdLocationsLocationIdOrdersOrderIdDeliveriesDeliveryIdResult = AxiosResponse<GetDeliveryByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdCatalogModifierGroupsModifierGroupIdResult = AxiosResponse<ListAccountCatalogModifierGroupByIdResponse>
export type DeleteV1AccountsAccountIdLocationsLocationIdCatalogModifierGroupsModifierGroupIdResult = AxiosResponse<unknown>
export type PatchV1AccountsAccountIdLocationsLocationIdCatalogModifierGroupsModifierGroupIdResult = AxiosResponse<ListAccountCatalogModifierGroupByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdCatalogProductsResult = AxiosResponse<ListProductsResponse>
export type PostV1AccountsAccountIdLocationsLocationIdCatalogProductsResult = AxiosResponse<GetAccountProductByIdResponse>
export type GetV1UsersUserIdApplicationsApplicationIdAuditsResult = AxiosResponse<ListAuditsResponse>
export type GetV1ApplicationsApplicationIdResult = AxiosResponse<GetApplicationInfoResponse>
export type PostV1ResellersResellerIdDeliveriesDeliveryIdDispatchDispatchIdCancelResult = AxiosResponse<GetDeliveryByIdResponse>
export type PostV1AccountsAccountIdLocationsLocationIdConnectionsConnectionIdPullResult = AxiosResponse<unknown>
export type GetV1AccountsAccountIdDeliveriesDeliveryIdResult = AxiosResponse<GetDeliveryByIdResponse>
export type PatchV1AccountsAccountIdDeliveriesDeliveryIdResult = AxiosResponse<GetDeliveryByIdResponse>
export type GetV1ResellersResellerIdAccountsResult = AxiosResponse<ListAccountsResponse>
export type PostV1ResellersResellerIdAccountsResult = AxiosResponse<GetAccountByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdMetricsResult = AxiosResponse<unknown>
export type GetV1AccountsResult = AxiosResponse<ListAccountsResponse>
export type PostV1AccountsResult = AxiosResponse<GetAccountByIdResponse>
export type GetV1ResellersResellerIdOrdersResult = AxiosResponse<ListOrdersResponse>
export type GetV1ResellersResult = AxiosResponse<ListResellersResponse>
export type GetV1AccountsAccountIdLocationsLocationIdDeliveriesDeliveryIdDispatchDispatchIdResult = AxiosResponse<GetDispatchedByIdResponse>
export type PatchV1AccountsAccountIdLocationsLocationIdDeliveriesDeliveryIdDispatchDispatchIdResult = AxiosResponse<GetDispatchedByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsResult = AxiosResponse<ListAccountMenuItemsResponse>
export type PostV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsResult = AxiosResponse<ListAccountMenuItemByIdResponse>
export type PostV1ResellersResellerIdOrdersOrderIdDeliveriesDeliveryIdRefreshResult = AxiosResponse<GetDeliveryByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdOrdersOrderIdAuditsResult = AxiosResponse<ListAuditsResponse>
export type GetV1UsersUserIdApplicationsResult = AxiosResponse<ListApplicationsResponse>
export type PostV1UsersUserIdApplicationsResult = AxiosResponse<GetApplicationByIdResponse>
export type GetV1UsersUserIdApplicationsApplicationIdMetricsResult = AxiosResponse<unknown>
export type PostV1UsersUserIdApplicationsApplicationIdImageResult = AxiosResponse<SignedUrlResponse>
export type DeleteV1UsersUserIdApplicationsApplicationIdImageResult = AxiosResponse<unknown>
export type GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiersResult = AxiosResponse<ListAccountMenuModifiersResponse>
export type PostV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiersResult = AxiosResponse<AccountMenuModifierByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdCatalogProductsProductIdResult = AxiosResponse<GetAccountProductByIdResponse>
export type DeleteV1AccountsAccountIdLocationsLocationIdCatalogProductsProductIdResult = AxiosResponse<unknown>
export type PatchV1AccountsAccountIdLocationsLocationIdCatalogProductsProductIdResult = AxiosResponse<GetAccountProductByIdResponse>
export type GetV1UsersUserIdApplicationsApplicationIdResult = AxiosResponse<GetApplicationByIdResponse>
export type DeleteV1UsersUserIdApplicationsApplicationIdResult = AxiosResponse<unknown>
export type PatchV1UsersUserIdApplicationsApplicationIdResult = AxiosResponse<GetApplicationByIdResponse>
export type GetV1AccountsAccountIdConnectionsConnectionIdResult = AxiosResponse<GetConnectionByIdResponse>
export type PostV1ResellersResellerIdDeliveriesDeliveryIdRefreshResult = AxiosResponse<GetDeliveryByIdResponse>
export type GetV1AccountsAccountIdDeliveriesResult = AxiosResponse<ListDeliveriesResponse>
export type PostV1AccountsAccountIdDeliveriesResult = AxiosResponse<GetDeliveryByIdResponse>
export type GetV1ApplicationsResult = AxiosResponse<ListApplicationsInfoResponse>
export type GetV1UsersUserIdResult = AxiosResponse<GetUserByIdResponse>
export type PatchV1UsersUserIdResult = AxiosResponse<GetUserByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdDeliveriesResult = AxiosResponse<ListDeliveriesResponse>
export type GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroupsResult = AxiosResponse<ListAccountMenuModifierGroupsResponse>
export type PostV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroupsResult = AxiosResponse<AccountMenuModifierGroupByIdResponse>
export type PostV1AccountsAccountIdDeliveriesDeliveryIdCancelResult = AxiosResponse<unknown>
export type GetV1ResellersResellerIdLocationsLocationIdResult = AxiosResponse<GetLocationByIdResponse>
export type DeleteV1ResellersResellerIdLocationsLocationIdResult = AxiosResponse<unknown>
export type PatchV1ResellersResellerIdLocationsLocationIdResult = AxiosResponse<GetLocationByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiersModifierIdResult = AxiosResponse<AccountMenuModifierByIdResponse>
export type DeleteV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiersModifierIdResult = AxiosResponse<unknown>
export type PatchV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifiersModifierIdResult = AxiosResponse<AccountMenuModifierByIdResponse>
export type GetV1AccountsAccountIdResult = AxiosResponse<GetAccountByIdResponse>
export type PatchV1AccountsAccountIdResult = AxiosResponse<GetAccountByIdResponse>
export type GetV1AccountsAccountIdOrdersOrderIdAuditsResult = AxiosResponse<ListAuditsResponse>
export type GetV1AccountsAccountIdLocationsLocationIdCatalogModifiersResult = AxiosResponse<ListCatalogModifiersResponse>
export type PostV1AccountsAccountIdLocationsLocationIdCatalogModifiersResult = AxiosResponse<GetAccountCatalogModifierByIdResponse>
export type GetV1ResellersResellerIdAccountsAccountIdLocationsLocationIdResult = AxiosResponse<GetLocationByIdResponse>
export type DeleteV1ResellersResellerIdAccountsAccountIdLocationsLocationIdResult = AxiosResponse<unknown>
export type PatchV1ResellersResellerIdAccountsAccountIdLocationsLocationIdResult = AxiosResponse<GetLocationByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategoriesResult = AxiosResponse<ListAccountMenuCategoriesResponse>
export type PostV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategoriesResult = AxiosResponse<GetAccountMenuCategoryByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemIdVariantsResult = AxiosResponse<ListAccountMenuItemVariantsResponse>
export type GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroupsModifierGroupIdResult = AxiosResponse<AccountMenuModifierGroupByIdResponse>
export type DeleteV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroupsModifierGroupIdResult = AxiosResponse<unknown>
export type PatchV1AccountsAccountIdLocationsLocationIdMenusMenuIdModifierGroupsModifierGroupIdResult = AxiosResponse<AccountMenuModifierGroupByIdResponse>
export type PostV1AccountsAccountIdDeliveriesDeliveryIdDispatchResult = AxiosResponse<GetDeliveryByIdResponse>
export type PatchV1AccountsAccountIdLocationsLocationIdMenusMenuIdRearrangeResult = AxiosResponse<unknown>
export type GetV1ResellersResellerIdOrdersOrderIdResult = AxiosResponse<GetOrderByIdResponse>
export type GetV1ResellersResellerIdOrdersOrderIdDeliveriesDeliveryIdResult = AxiosResponse<GetDeliveryByIdResponse>
export type PostV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemIdImageResult = AxiosResponse<SignedUrlResponse>
export type DeleteV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemIdImageResult = AxiosResponse<unknown>
export type GetV1AccountsAccountIdLocationsLocationIdCatalogModifierGroupsResult = AxiosResponse<ListAccountCatalogModifierGroupsResponse>
export type PostV1AccountsAccountIdLocationsLocationIdCatalogModifierGroupsResult = AxiosResponse<ListAccountCatalogModifierGroupByIdResponse>
export type GetV1AccountsAccountIdLocationsResult = AxiosResponse<ListLocationsResponse>
export type PostV1AccountsAccountIdLocationsResult = AxiosResponse<GetLocationByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdCatalogExportResult = AxiosResponse<GetAccountCatalogExportResponse>
export type PostV1ResellersResellerIdOrdersOrderIdDeliveriesDeliveryIdDispatchResult = AxiosResponse<GetDeliveryByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdConnectionsConnectionIdResult = AxiosResponse<GetConnectionByIdResponse>
export type PatchV1AccountsAccountIdLocationsLocationIdConnectionsConnectionIdResult = AxiosResponse<GetConnectionByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdCatalogCategoriesCategoryIdResult = AxiosResponse<GetAccountCatalogCategoryByIdResponse>
export type DeleteV1AccountsAccountIdLocationsLocationIdCatalogCategoriesCategoryIdResult = AxiosResponse<unknown>
export type PatchV1AccountsAccountIdLocationsLocationIdCatalogCategoriesCategoryIdResult = AxiosResponse<GetAccountCatalogCategoryByIdResponse>
export type PostOauth2TokenResult = AxiosResponse<TokenResponse>
export type GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemIdResult = AxiosResponse<ListAccountMenuItemByIdResponse>
export type DeleteV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemIdResult = AxiosResponse<unknown>
export type PatchV1AccountsAccountIdLocationsLocationIdMenusMenuIdItemsItemIdResult = AxiosResponse<ListAccountMenuItemByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdOrdersResult = AxiosResponse<ListOrdersResponse>
export type PostV1AccountsAccountIdLocationsLocationIdOrdersResult = AxiosResponse<GetOrderByIdResponse>
export type PostV1AccountsAccountIdLocationsLocationIdCatalogProductsProductIdImageResult = AxiosResponse<SignedUrlResponse>
export type DeleteV1AccountsAccountIdLocationsLocationIdCatalogProductsProductIdImageResult = AxiosResponse<unknown>
export type GetV1ResellersResellerIdDeliveriesResult = AxiosResponse<ListDeliveriesResponse>
export type PostV1ResellersResellerIdDeliveriesResult = AxiosResponse<GetDeliveryByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdResult = AxiosResponse<GetLocationByIdResponse>
export type DeleteV1AccountsAccountIdLocationsLocationIdResult = AxiosResponse<unknown>
export type PatchV1AccountsAccountIdLocationsLocationIdResult = AxiosResponse<GetLocationByIdResponse>
export type GetV1ResellersResellerIdAccountsAccountIdLocationsLocationIdOrdersResult = AxiosResponse<ListOrdersResponse>
export type GetV1AccountsAccountIdLocationsLocationIdApplicationsResult = AxiosResponse<ListApplicationsResponse>
export type GetV1AccountsAccountIdLocationsLocationIdCatalogCategoriesResult = AxiosResponse<ListCatalogCategoriesResponse>
export type PostV1AccountsAccountIdLocationsLocationIdCatalogCategoriesResult = AxiosResponse<GetAccountCatalogCategoryByIdResponse>
export type PutV1AccountsAccountIdLocationsLocationIdCatalogImportResult = AxiosResponse<unknown>
export type GetV1AccountsAccountIdMetricsResult = AxiosResponse<unknown>
export type GetV1AccountsAccountIdLocationsLocationIdOrdersOrderIdResult = AxiosResponse<GetOrderByIdResponse>
export type PatchV1AccountsAccountIdLocationsLocationIdOrdersOrderIdResult = AxiosResponse<GetOrderByIdResponse>
export type GetV1ResellersResellerIdAccountsAccountIdLocationsLocationIdApplicationsResult = AxiosResponse<ListApplicationsResponse>
export type GetV1ResellersResellerIdAccountsAccountIdLocationsResult = AxiosResponse<ListLocationsResponse>
export type PostV1ResellersResellerIdAccountsAccountIdLocationsResult = AxiosResponse<GetLocationByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdResult = AxiosResponse<GetAccountMenuByIdResponse>
export type DeleteV1AccountsAccountIdLocationsLocationIdMenusMenuIdResult = AxiosResponse<unknown>
export type PatchV1AccountsAccountIdLocationsLocationIdMenusMenuIdResult = AxiosResponse<GetAccountMenuByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdAuditsResult = AxiosResponse<ListAuditsResponse>
export type PostV1ResellersResellerIdDeliveriesDeliveryIdCancelResult = AxiosResponse<GetDeliveryByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdCatalogModifiersModifierIdResult = AxiosResponse<GetAccountCatalogModifierByIdResponse>
export type DeleteV1AccountsAccountIdLocationsLocationIdCatalogModifiersModifierIdResult = AxiosResponse<unknown>
export type PatchV1AccountsAccountIdLocationsLocationIdCatalogModifiersModifierIdResult = AxiosResponse<GetAccountCatalogModifierByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategoriesCategoryIdResult = AxiosResponse<GetAccountMenuCategoryByIdResponse>
export type DeleteV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategoriesCategoryIdResult = AxiosResponse<unknown>
export type PatchV1AccountsAccountIdLocationsLocationIdMenusMenuIdCategoriesCategoryIdResult = AxiosResponse<GetAccountMenuCategoryByIdResponse>
export type GetV1AccountsAccountIdOrdersOrderIdResult = AxiosResponse<GetOrderByIdResponse>
export type PatchV1AccountsAccountIdOrdersOrderIdResult = AxiosResponse<GetOrderByIdResponse>
export type GetV1ResellersResellerIdAccountsAccountIdResult = AxiosResponse<GetAccountByIdResponse>
export type PatchV1ResellersResellerIdAccountsAccountIdResult = AxiosResponse<GetAccountByIdResponse>
export type GetV1AccountsAccountIdLocationsLocationIdConnectionsResult = AxiosResponse<ListConnectionsResponse>
export type GetV1ResellersResellerIdAuditsResult = AxiosResponse<ListAuditsResponse>
export type DeleteV1AccountsAccountIdLocationsLocationIdApplicationsApplicationIdResult = AxiosResponse<unknown>
export type PostV1ResellersResellerIdDeliveriesDeliveryIdDispatchResult = AxiosResponse<GetDeliveryByIdResponse>
export type GetV1AccountsAccountIdOrdersResult = AxiosResponse<ListOrdersResponse>
export type PostV1AccountsAccountIdDeliveriesDeliveryIdRefreshResult = AxiosResponse<unknown>
export type GetV1ResellersResellerIdUsersResult = AxiosResponse<ListUsersResponse>
export type PostV1ResellersResellerIdUsersResult = AxiosResponse<GetUserByIdResponse>
export type PostV1AccountsAccountIdDeliveriesDeliveryIdDispatchDispatchedIdCancelResult = AxiosResponse<unknown>
export type GetV1AccountsAccountIdLocationsLocationIdOrdersOrderIdDeliveriesResult = AxiosResponse<ListDeliveriesResponse>
export type PostV1AccountsAccountIdLocationsLocationIdOrdersOrderIdDeliveriesResult = AxiosResponse<GetDeliveryByIdResponse>
export type GetV1ResellersResellerIdAccountsAccountIdMetricsResult = AxiosResponse<unknown>
export type PostV1AccountsAccountIdConnectionsConnectionIdPublishResult = AxiosResponse<unknown>
export type GetV1AccountsAccountIdLocationsLocationIdCatalogProductsProductIdVariantsResult = AxiosResponse<GetAccountProductVariantsResponse>
